// Code generated by goyacc - DO NOT EDIT.

package cxgo0

import __yyfmt__ "fmt"

import (
	// "fmt"
	"bytes"
	// "os"
	. "github.com/skycoin/cx/cx"
	. "github.com/skycoin/cx/cxgo/actions"
)

var PRGRM0 *CXProgram

var lineNo int = -1
var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

// Parse() is the function that is called from main().
// It is needed because yyParse is not exported.
func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

func PreFunctionDeclaration(fn *CXFunction, inputs []*CXArgument, outputs []*CXArgument) {
	// adding inputs, outputs
	for _, inp := range inputs {
		fn.AddInput(inp)
	}
	for _, out := range outputs {
		fn.AddOutput(out)
	}
}

type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault              = 57493
	yyEofCode              = 57344
	ADDR                   = 57492
	ADD_ASSIGN             = 57439
	ADD_OP                 = 57399
	AFF                    = 57487
	AFFVAR                 = 57406
	AND                    = 57397
	AND_ASSIGN             = 57440
	AND_OP                 = 57437
	ASSIGN                 = 57379
	BASICTYPE              = 57470
	BITANDEQ               = 57425
	BITCLEAR_OP            = 57416
	BITOREQ                = 57427
	BITOR_OP               = 57415
	BITXOREQ               = 57426
	BITXOR_OP              = 57414
	BOOL                   = 57449
	BOOLEAN_LITERAL        = 57346
	BREAK                  = 57467
	BYTE_LITERAL           = 57347
	CAFF                   = 57488
	CASE                   = 57464
	CASSIGN                = 57380
	CLAUSES                = 57478
	COLON                  = 57389
	COMMA                  = 57367
	COMMENT                = 57369
	CONST                  = 57463
	CONTINUE               = 57468
	DEC_OP                 = 57428
	DEF                    = 57475
	DEFAULT                = 57465
	DIVEQ                  = 57420
	DIV_ASSIGN             = 57444
	DIV_OP                 = 57402
	DOUBLE_LITERAL         = 57356
	DPROGRAM               = 57485
	DSTACK                 = 57484
	DSTATE                 = 57486
	ELSE                   = 57373
	ENUM                   = 57462
	EQUAL                  = 57388
	EQUALWORD              = 57391
	EQ_OP                  = 57435
	EXP                    = 57412
	EXPEQ                  = 57422
	EXPR                   = 57476
	F32                    = 57450
	F64                    = 57451
	FIELD                  = 57477
	FLOAT_LITERAL          = 57355
	FOR                    = 57374
	FUNC                   = 57357
	GE_OP                  = 57433
	GOTO                   = 57383
	GTEQ_OP                = 57386
	GTHANEQ                = 57394
	GTHANWORD              = 57392
	GT_OP                  = 57384
	I16                    = 57453
	I32                    = 57454
	I64                    = 57455
	I8                     = 57452
	IDENTIFIER             = 57365
	IF                     = 57372
	IMPORT                 = 57381
	INC_OP                 = 57429
	INFER                  = 57490
	INT_LITERAL            = 57349
	LBRACE                 = 57361
	LBRACK                 = 57363
	LEFTSHIFT              = 57410
	LEFTSHIFTEQ            = 57423
	LEFT_ASSIGN            = 57441
	LEFT_OP                = 57431
	LE_OP                  = 57434
	LONG_LITERAL           = 57350
	LPAREN                 = 57359
	LTEQ_OP                = 57387
	LTHANEQ                = 57395
	LTHANWORD              = 57393
	LT_OP                  = 57385
	MINUSEQ                = 57418
	MINUSMINUS             = 57408
	MOD_ASSIGN             = 57442
	MOD_OP                 = 57403
	MULTEQ                 = 57419
	MUL_ASSIGN             = 57443
	MUL_OP                 = 57401
	NEG_OP                 = 57405
	NEW                    = 57390
	NEWLINE                = 57378
	NE_OP                  = 57436
	NOT                    = 57413
	OBJECT                 = 57479
	OBJECTS                = 57480
	OP                     = 57358
	OR                     = 57398
	OR_ASSIGN              = 57445
	OR_OP                  = 57438
	PACKAGE                = 57371
	PERIOD                 = 57368
	PLUSEQ                 = 57417
	PLUSPLUS               = 57407
	PSTEP                  = 57482
	PTR_OP                 = 57430
	RBRACE                 = 57362
	RBRACK                 = 57364
	REF_OP                 = 57404
	REM                    = 57474
	REMAINDER              = 57409
	REMAINDEREQ            = 57421
	RETURN                 = 57382
	RIGHTSHIFT             = 57411
	RIGHTSHIFTEQ           = 57424
	RIGHT_ASSIGN           = 57446
	RIGHT_OP               = 57432
	RPAREN                 = 57360
	SEMICOLON              = 57377
	SFUNC                  = 57473
	SHORT_LITERAL          = 57348
	SPACKAGE               = 57471
	SSTRUCT                = 57472
	STEP                   = 57481
	STR                    = 57456
	STRING_LITERAL         = 57370
	STRUCT                 = 57376
	SUB_ASSIGN             = 57447
	SUB_OP                 = 57400
	SWITCH                 = 57466
	TAG                    = 57489
	TSTEP                  = 57483
	TYPE                   = 57469
	TYPSTRUCT              = 57375
	UI16                   = 57458
	UI32                   = 57459
	UI64                   = 57460
	UI8                    = 57457
	UNEQUAL                = 57396
	UNION                  = 57461
	UNSIGNED_BYTE_LITERAL  = 57351
	UNSIGNED_INT_LITERAL   = 57353
	UNSIGNED_LONG_LITERAL  = 57354
	UNSIGNED_SHORT_LITERAL = 57352
	VALUE                  = 57491
	VAR                    = 57366
	XOR_ASSIGN             = 57448
	yyErrCode              = 57345

	yyMaxDepth = 200
	yyTabOfs   = -228
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57377: 0,   // SEMICOLON (201x)
		57404: 1,   // REF_OP (198x)
		57359: 2,   // LPAREN (196x)
		57400: 3,   // SUB_OP (192x)
		57401: 4,   // MUL_OP (191x)
		57399: 5,   // ADD_OP (187x)
		57363: 6,   // LBRACK (185x)
		57428: 7,   // DEC_OP (172x)
		57429: 8,   // INC_OP (172x)
		57362: 9,   // RBRACE (171x)
		57361: 10,  // LBRACE (167x)
		57365: 11,  // IDENTIFIER (164x)
		57367: 12,  // COMMA (154x)
		57360: 13,  // RPAREN (141x)
		57487: 14,  // AFF (134x)
		57449: 15,  // BOOL (134x)
		57450: 16,  // F32 (134x)
		57451: 17,  // F64 (134x)
		57453: 18,  // I16 (134x)
		57454: 19,  // I32 (134x)
		57455: 20,  // I64 (134x)
		57452: 21,  // I8 (134x)
		57456: 22,  // STR (134x)
		57458: 23,  // UI16 (134x)
		57459: 24,  // UI32 (134x)
		57460: 25,  // UI64 (134x)
		57457: 26,  // UI8 (134x)
		57349: 27,  // INT_LITERAL (127x)
		57370: 28,  // STRING_LITERAL (118x)
		57346: 29,  // BOOLEAN_LITERAL (117x)
		57347: 30,  // BYTE_LITERAL (117x)
		57356: 31,  // DOUBLE_LITERAL (117x)
		57355: 32,  // FLOAT_LITERAL (117x)
		57490: 33,  // INFER (117x)
		57350: 34,  // LONG_LITERAL (117x)
		57405: 35,  // NEG_OP (117x)
		57348: 36,  // SHORT_LITERAL (117x)
		57351: 37,  // UNSIGNED_BYTE_LITERAL (117x)
		57353: 38,  // UNSIGNED_INT_LITERAL (117x)
		57354: 39,  // UNSIGNED_LONG_LITERAL (117x)
		57352: 40,  // UNSIGNED_SHORT_LITERAL (117x)
		57389: 41,  // COLON (103x)
		57364: 42,  // RBRACK (102x)
		63:    43,  // '?' (88x)
		57438: 44,  // OR_OP (88x)
		57437: 45,  // AND_OP (87x)
		57415: 46,  // BITOR_OP (85x)
		57414: 47,  // BITXOR_OP (83x)
		57435: 48,  // EQ_OP (79x)
		57384: 49,  // GT_OP (79x)
		57386: 50,  // GTEQ_OP (79x)
		57385: 51,  // LT_OP (79x)
		57387: 52,  // LTEQ_OP (79x)
		57436: 53,  // NE_OP (79x)
		57416: 54,  // BITCLEAR_OP (77x)
		57431: 55,  // LEFT_OP (77x)
		57432: 56,  // RIGHT_OP (77x)
		57558: 57,  // type_specifier (75x)
		57379: 58,  // ASSIGN (72x)
		57366: 59,  // VAR (70x)
		57527: 60,  // indexing_literal (68x)
		57402: 61,  // DIV_OP (66x)
		57403: 62,  // MOD_OP (66x)
		57550: 63,  // slice_literal_expression (64x)
		57498: 64,  // array_literal_expression (63x)
		57545: 65,  // postfix_expression (63x)
		57546: 66,  // primary_expression (63x)
		57560: 67,  // unary_expression (63x)
		57561: 68,  // unary_operator (63x)
		57439: 69,  // ADD_ASSIGN (59x)
		57440: 70,  // AND_ASSIGN (59x)
		57380: 71,  // CASSIGN (59x)
		57444: 72,  // DIV_ASSIGN (59x)
		57441: 73,  // LEFT_ASSIGN (59x)
		57442: 74,  // MOD_ASSIGN (59x)
		57443: 75,  // MUL_ASSIGN (59x)
		57445: 76,  // OR_ASSIGN (59x)
		57368: 77,  // PERIOD (59x)
		57446: 78,  // RIGHT_ASSIGN (59x)
		57447: 79,  // SUB_ASSIGN (59x)
		57448: 80,  // XOR_ASSIGN (59x)
		57540: 81,  // multiplicative_expression (56x)
		57494: 82,  // additive_expression (54x)
		57549: 83,  // shift_expression (51x)
		57372: 84,  // IF (50x)
		57467: 85,  // BREAK (49x)
		57464: 86,  // CASE (49x)
		57468: 87,  // CONTINUE (49x)
		57465: 88,  // DEFAULT (49x)
		57374: 89,  // FOR (49x)
		57383: 90,  // GOTO (49x)
		57382: 91,  // RETURN (49x)
		57466: 92,  // SWITCH (49x)
		57547: 93,  // relational_expression (45x)
		57496: 94,  // and_expression (44x)
		57514: 95,  // exclusive_or_expression (43x)
		57526: 96,  // inclusive_or_expression (42x)
		57538: 97,  // logical_and_expression (41x)
		57505: 98,  // conditional_expression (40x)
		57539: 99,  // logical_or_expression (40x)
		57500: 100, // assignment_expression (33x)
		57357: 101, // FUNC (33x)
		57555: 102, // struct_literal_expression (33x)
		57381: 103, // IMPORT (25x)
		57371: 104, // PACKAGE (25x)
		57481: 105, // STEP (25x)
		57483: 106, // TSTEP (25x)
		57469: 107, // TYPE (25x)
		57344: 108, // $end (24x)
		57515: 109, // expression (21x)
		57504: 110, // compound_statement (20x)
		57516: 111, // expression_statement (15x)
		57535: 112, // iteration_statement (12x)
		57536: 113, // jump_statement (12x)
		57537: 114, // labeled_statement (12x)
		57548: 115, // selection_statement (12x)
		57551: 116, // statement (12x)
		57507: 117, // declaration (10x)
		57502: 118, // block_item (9x)
		57509: 119, // declarator (8x)
		57510: 120, // direct_declarator (8x)
		57373: 121, // ELSE (8x)
		57508: 122, // declaration_specifiers (5x)
		57542: 123, // parameter_declaration (5x)
		57503: 124, // block_item_list (4x)
		57511: 125, // else_statement (4x)
		57512: 126, // elseif (4x)
		57529: 127, // infer_action (4x)
		57497: 128, // argument_expression_list (3x)
		57499: 129, // array_literal_expression_list (3x)
		57506: 130, // constant_expression (3x)
		57534: 131, // int_value (3x)
		57556: 132, // struct_literal_fields (3x)
		57513: 133, // elseif_list (2x)
		57517: 134, // external_declaration (2x)
		57519: 135, // function_declaration (2x)
		57520: 136, // function_header (2x)
		57521: 137, // function_parameters (2x)
		57522: 138, // global_declaration (2x)
		57525: 139, // import_declaration (2x)
		57533: 140, // initializer (2x)
		57541: 141, // package_declaration (2x)
		57543: 142, // parameter_list (2x)
		57544: 143, // parameter_type_list (2x)
		57552: 144, // stepping (2x)
		57553: 145, // struct_declaration (2x)
		57559: 146, // types_list (2x)
		57495: 147, // after_period (1x)
		57501: 148, // assignment_operator (1x)
		57518: 149, // fields (1x)
		57523: 150, // id_list (1x)
		57530: 151, // infer_action_arg (1x)
		57531: 152, // infer_actions (1x)
		57532: 153, // infer_clauses (1x)
		57376: 154, // STRUCT (1x)
		57554: 155, // struct_fields (1x)
		57557: 156, // translation_unit (1x)
		57493: 157, // $default (0x)
		57492: 158, // ADDR (0x)
		57406: 159, // AFFVAR (0x)
		57397: 160, // AND (0x)
		57470: 161, // BASICTYPE (0x)
		57425: 162, // BITANDEQ (0x)
		57427: 163, // BITOREQ (0x)
		57426: 164, // BITXOREQ (0x)
		57488: 165, // CAFF (0x)
		57478: 166, // CLAUSES (0x)
		57369: 167, // COMMENT (0x)
		57463: 168, // CONST (0x)
		57475: 169, // DEF (0x)
		57420: 170, // DIVEQ (0x)
		57485: 171, // DPROGRAM (0x)
		57484: 172, // DSTACK (0x)
		57486: 173, // DSTATE (0x)
		57462: 174, // ENUM (0x)
		57388: 175, // EQUAL (0x)
		57391: 176, // EQUALWORD (0x)
		57345: 177, // error (0x)
		57412: 178, // EXP (0x)
		57422: 179, // EXPEQ (0x)
		57476: 180, // EXPR (0x)
		57477: 181, // FIELD (0x)
		57433: 182, // GE_OP (0x)
		57394: 183, // GTHANEQ (0x)
		57392: 184, // GTHANWORD (0x)
		57524: 185, // identifier_list (0x)
		57528: 186, // indexing_slice_literal (0x)
		57434: 187, // LE_OP (0x)
		57410: 188, // LEFTSHIFT (0x)
		57423: 189, // LEFTSHIFTEQ (0x)
		57395: 190, // LTHANEQ (0x)
		57393: 191, // LTHANWORD (0x)
		57418: 192, // MINUSEQ (0x)
		57408: 193, // MINUSMINUS (0x)
		57419: 194, // MULTEQ (0x)
		57390: 195, // NEW (0x)
		57378: 196, // NEWLINE (0x)
		57413: 197, // NOT (0x)
		57479: 198, // OBJECT (0x)
		57480: 199, // OBJECTS (0x)
		57358: 200, // OP (0x)
		57398: 201, // OR (0x)
		57417: 202, // PLUSEQ (0x)
		57407: 203, // PLUSPLUS (0x)
		57482: 204, // PSTEP (0x)
		57430: 205, // PTR_OP (0x)
		57474: 206, // REM (0x)
		57409: 207, // REMAINDER (0x)
		57421: 208, // REMAINDEREQ (0x)
		57411: 209, // RIGHTSHIFT (0x)
		57424: 210, // RIGHTSHIFTEQ (0x)
		57473: 211, // SFUNC (0x)
		57471: 212, // SPACKAGE (0x)
		57472: 213, // SSTRUCT (0x)
		57489: 214, // TAG (0x)
		57375: 215, // TYPSTRUCT (0x)
		57396: 216, // UNEQUAL (0x)
		57461: 217, // UNION (0x)
		57491: 218, // VALUE (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"REF_OP",
		"LPAREN",
		"SUB_OP",
		"MUL_OP",
		"ADD_OP",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"LBRACE",
		"IDENTIFIER",
		"COMMA",
		"RPAREN",
		"AFF",
		"BOOL",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"INFER",
		"LONG_LITERAL",
		"NEG_OP",
		"SHORT_LITERAL",
		"UNSIGNED_BYTE_LITERAL",
		"UNSIGNED_INT_LITERAL",
		"UNSIGNED_LONG_LITERAL",
		"UNSIGNED_SHORT_LITERAL",
		"COLON",
		"RBRACK",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"NE_OP",
		"BITCLEAR_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"ASSIGN",
		"VAR",
		"indexing_literal",
		"DIV_OP",
		"MOD_OP",
		"slice_literal_expression",
		"array_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"CASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"PERIOD",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"multiplicative_expression",
		"additive_expression",
		"shift_expression",
		"IF",
		"BREAK",
		"CASE",
		"CONTINUE",
		"DEFAULT",
		"FOR",
		"GOTO",
		"RETURN",
		"SWITCH",
		"relational_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"assignment_expression",
		"FUNC",
		"struct_literal_expression",
		"IMPORT",
		"PACKAGE",
		"STEP",
		"TSTEP",
		"TYPE",
		"$end",
		"expression",
		"compound_statement",
		"expression_statement",
		"iteration_statement",
		"jump_statement",
		"labeled_statement",
		"selection_statement",
		"statement",
		"declaration",
		"block_item",
		"declarator",
		"direct_declarator",
		"ELSE",
		"declaration_specifiers",
		"parameter_declaration",
		"block_item_list",
		"else_statement",
		"elseif",
		"infer_action",
		"argument_expression_list",
		"array_literal_expression_list",
		"constant_expression",
		"int_value",
		"struct_literal_fields",
		"elseif_list",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"stepping",
		"struct_declaration",
		"types_list",
		"after_period",
		"assignment_operator",
		"fields",
		"id_list",
		"infer_action_arg",
		"infer_actions",
		"infer_clauses",
		"STRUCT",
		"struct_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CAFF",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"DEF",
		"DIVEQ",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GTHANEQ",
		"GTHANWORD",
		"identifier_list",
		"indexing_slice_literal",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"TAG",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {156, 1},
		2:   {156, 2},
		3:   {134, 1},
		4:   {134, 1},
		5:   {134, 1},
		6:   {134, 1},
		7:   {134, 1},
		8:   {134, 1},
		9:   {144, 3},
		10:  {144, 2},
		11:  {138, 4},
		12:  {138, 6},
		13:  {145, 4},
		14:  {155, 3},
		15:  {155, 4},
		16:  {149, 2},
		17:  {149, 3},
		18:  {141, 3},
		19:  {139, 3},
		20:  {136, 2},
		21:  {136, 5},
		22:  {137, 2},
		23:  {137, 3},
		24:  {135, 3},
		25:  {135, 4},
		26:  {143, 1},
		27:  {142, 1},
		28:  {142, 3},
		29:  {123, 2},
		30:  {185, 1},
		31:  {185, 3},
		32:  {119, 1},
		33:  {120, 1},
		34:  {120, 3},
		35:  {150, 1},
		36:  {150, 1},
		37:  {150, 3},
		38:  {150, 3},
		39:  {146, 3},
		40:  {146, 2},
		41:  {122, 3},
		42:  {122, 2},
		43:  {122, 3},
		44:  {122, 1},
		45:  {122, 1},
		46:  {122, 2},
		47:  {122, 2},
		48:  {122, 3},
		49:  {122, 3},
		50:  {57, 1},
		51:  {57, 1},
		52:  {57, 1},
		53:  {57, 1},
		54:  {57, 1},
		55:  {57, 1},
		56:  {57, 1},
		57:  {57, 1},
		58:  {57, 1},
		59:  {57, 1},
		60:  {57, 1},
		61:  {57, 1},
		62:  {57, 1},
		63:  {132, 0},
		64:  {132, 3},
		65:  {132, 5},
		66:  {129, 1},
		67:  {129, 3},
		68:  {129, 3},
		69:  {60, 3},
		70:  {60, 4},
		71:  {186, 2},
		72:  {186, 3},
		73:  {64, 5},
		74:  {64, 4},
		75:  {64, 5},
		76:  {64, 4},
		77:  {63, 6},
		78:  {63, 5},
		79:  {63, 6},
		80:  {63, 5},
		81:  {63, 3},
		82:  {151, 1},
		83:  {151, 1},
		84:  {151, 3},
		85:  {127, 6},
		86:  {127, 4},
		87:  {127, 4},
		88:  {127, 6},
		89:  {152, 2},
		90:  {152, 3},
		91:  {153, 0},
		92:  {153, 1},
		93:  {131, 1},
		94:  {131, 2},
		95:  {66, 1},
		96:  {66, 4},
		97:  {66, 1},
		98:  {66, 1},
		99:  {66, 1},
		100: {66, 1},
		101: {66, 1},
		102: {66, 1},
		103: {66, 1},
		104: {66, 1},
		105: {66, 1},
		106: {66, 1},
		107: {66, 1},
		108: {66, 1},
		109: {66, 3},
		110: {66, 1},
		111: {66, 1},
		112: {147, 1},
		113: {147, 1},
		114: {65, 1},
		115: {65, 4},
		116: {65, 3},
		117: {65, 3},
		118: {65, 4},
		119: {65, 2},
		120: {65, 2},
		121: {65, 3},
		122: {128, 1},
		123: {128, 3},
		124: {67, 1},
		125: {67, 2},
		126: {67, 2},
		127: {67, 2},
		128: {68, 1},
		129: {68, 1},
		130: {68, 1},
		131: {68, 1},
		132: {68, 1},
		133: {81, 1},
		134: {81, 3},
		135: {81, 3},
		136: {81, 3},
		137: {82, 1},
		138: {82, 3},
		139: {82, 3},
		140: {83, 1},
		141: {83, 3},
		142: {83, 3},
		143: {83, 3},
		144: {93, 1},
		145: {93, 3},
		146: {93, 3},
		147: {93, 3},
		148: {93, 3},
		149: {93, 3},
		150: {93, 3},
		151: {94, 1},
		152: {94, 3},
		153: {95, 1},
		154: {95, 3},
		155: {96, 1},
		156: {96, 3},
		157: {97, 1},
		158: {97, 3},
		159: {99, 1},
		160: {99, 3},
		161: {98, 1},
		162: {98, 5},
		163: {102, 1},
		164: {102, 4},
		165: {102, 5},
		166: {102, 6},
		167: {100, 1},
		168: {100, 3},
		169: {148, 1},
		170: {148, 1},
		171: {148, 1},
		172: {148, 1},
		173: {148, 1},
		174: {148, 1},
		175: {148, 1},
		176: {148, 1},
		177: {148, 1},
		178: {148, 1},
		179: {148, 1},
		180: {148, 1},
		181: {109, 1},
		182: {109, 3},
		183: {130, 1},
		184: {117, 4},
		185: {117, 6},
		186: {140, 1},
		187: {116, 1},
		188: {116, 1},
		189: {116, 1},
		190: {116, 1},
		191: {116, 1},
		192: {116, 1},
		193: {114, 3},
		194: {114, 4},
		195: {114, 3},
		196: {110, 3},
		197: {110, 4},
		198: {124, 1},
		199: {124, 2},
		200: {118, 1},
		201: {118, 1},
		202: {111, 1},
		203: {111, 2},
		204: {115, 8},
		205: {115, 7},
		206: {115, 6},
		207: {115, 7},
		208: {115, 6},
		209: {115, 7},
		210: {115, 3},
		211: {115, 5},
		212: {126, 6},
		213: {126, 5},
		214: {133, 1},
		215: {133, 2},
		216: {125, 4},
		217: {125, 3},
		218: {112, 3},
		219: {112, 4},
		220: {112, 5},
		221: {112, 4},
		222: {112, 5},
		223: {113, 3},
		224: {113, 2},
		225: {113, 2},
		226: {113, 2},
		227: {113, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [415][]uint16{
		// 0
		{59: 239, 101: 243, 103: 242, 241, 238, 237, 240, 134: 230, 233, 244, 138: 232, 234, 141: 231, 144: 236, 235, 156: 229},
		{59: 239, 101: 243, 103: 242, 241, 238, 237, 240, 228, 134: 642, 233, 244, 138: 232, 234, 141: 231, 144: 236, 235},
		{59: 227, 101: 227, 103: 227, 227, 227, 227, 227, 227},
		{59: 225, 101: 225, 103: 225, 225, 225, 225, 225, 225},
		{59: 224, 101: 224, 103: 224, 224, 224, 224, 224, 224},
		// 5
		{59: 223, 101: 223, 103: 223, 223, 223, 223, 223, 223},
		{59: 222, 101: 222, 103: 222, 222, 222, 222, 222, 222},
		{59: 221, 101: 221, 103: 221, 221, 221, 221, 221, 221},
		{59: 220, 101: 220, 103: 220, 220, 220, 220, 220, 220},
		{3: 638, 27: 637, 131: 640},
		// 10
		{3: 638, 27: 637, 131: 636},
		{2: 428, 11: 427, 119: 630, 426},
		{11: 617},
		{11: 615},
		{28: 613},
		// 15
		{2: 609, 11: 608},
		{2: 245, 137: 246},
		{2: 428, 11: 427, 13: 599, 119: 603, 426, 123: 602, 142: 601, 600},
		{2: 245, 10: 249, 110: 247, 137: 248},
		{59: 204, 101: 204, 103: 204, 204, 204, 204, 204, 204},
		// 20
		{10: 249, 110: 598},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 316, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 318, 124: 317},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 12: 178, 178, 41: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 58: 178, 61: 178, 178, 69: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 12: 177, 177, 41: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 58: 177, 61: 177, 177, 69: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 12: 176, 176, 41: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 58: 176, 61: 176, 176, 69: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		// 25
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 12: 175, 175, 41: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 58: 175, 61: 175, 175, 69: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 12: 174, 174, 41: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 58: 174, 61: 174, 174, 69: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 12: 173, 173, 41: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 58: 173, 61: 173, 173, 69: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 12: 172, 172, 41: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 58: 172, 61: 172, 172, 69: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 12: 171, 171, 41: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 58: 171, 61: 171, 171, 69: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		// 30
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 12: 170, 170, 41: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 58: 170, 61: 170, 170, 69: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 12: 169, 169, 41: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 58: 169, 61: 169, 169, 69: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 12: 168, 168, 41: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 58: 168, 61: 168, 168, 69: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 12: 167, 167, 41: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 58: 167, 61: 167, 167, 69: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 12: 166, 166, 41: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 58: 166, 61: 166, 166, 69: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		// 35
		{27: 452, 42: 585},
		{6: 444, 11: 569, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 570},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 10: 335, 12: 133, 41: 567, 43: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 61: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{10: 542},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 41: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 58: 131, 61: 131, 131, 69: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		// 40
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 41: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 58: 130, 61: 130, 130, 69: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 41: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 58: 129, 61: 129, 129, 69: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 41: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 58: 128, 61: 128, 128, 69: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 41: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 58: 127, 61: 127, 127, 69: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 41: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 58: 126, 61: 126, 126, 69: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		// 45
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 41: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 58: 125, 61: 125, 125, 69: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 41: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 58: 124, 61: 124, 124, 69: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 41: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 58: 123, 61: 123, 123, 69: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 41: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 58: 122, 61: 122, 122, 69: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 41: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 58: 121, 61: 121, 121, 69: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 50
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 41: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 58: 120, 61: 120, 120, 69: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 540},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 41: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 58: 118, 61: 118, 118, 69: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 41: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 58: 117, 61: 117, 117, 69: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 41: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 58: 114, 61: 114, 114, 69: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		// 55
		{104, 104, 350, 104, 104, 104, 349, 352, 351, 104, 104, 12: 104, 104, 41: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 58: 104, 61: 104, 104, 69: 104, 104, 104, 104, 104, 104, 104, 104, 535, 104, 104, 104},
		{77: 531},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 530, 345},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 529, 345},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 525, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 348, 345},
		// 60
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 11: 100, 14: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 11: 99, 14: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{1: 98, 98, 98, 98, 98, 98, 98, 98, 11: 98, 14: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{1: 97, 97, 97, 97, 97, 97, 97, 97, 11: 97, 14: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{1: 96, 96, 96, 96, 96, 96, 96, 96, 11: 96, 14: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 65
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 95, 41: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 58: 512, 61: 95, 95, 69: 517, 521, 513, 515, 519, 516, 514, 523, 78: 520, 518, 522, 148: 511},
		{91, 91, 3: 91, 497, 91, 9: 91, 91, 12: 91, 91, 41: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 61: 498, 499},
		{88, 88, 3: 495, 5: 494, 9: 88, 88, 12: 88, 88, 41: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{84, 84, 9: 84, 84, 12: 84, 84, 41: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 492, 490, 491},
		{77, 77, 9: 77, 77, 12: 77, 77, 41: 77, 77, 77, 77, 77, 77, 77, 483, 486, 488, 485, 487, 484},
		// 70
		{75, 481, 9: 75, 75, 12: 75, 75, 41: 75, 75, 75, 75, 75, 75, 75},
		{73, 9: 73, 73, 12: 73, 73, 41: 73, 73, 73, 73, 73, 73, 479},
		{71, 9: 71, 71, 12: 71, 71, 41: 71, 71, 71, 71, 71, 477},
		{69, 9: 69, 69, 12: 69, 69, 41: 69, 69, 69, 69, 475},
		{67, 9: 67, 67, 12: 67, 67, 41: 67, 67, 470, 469},
		// 75
		{65, 9: 65, 65, 12: 65, 65, 41: 65, 65},
		{61, 9: 61, 61, 12: 61, 61, 41: 61, 61},
		{47, 10: 47, 12: 47, 47, 41: 47, 47},
		{380, 12: 332},
		{2: 428, 11: 427, 119: 429, 426},
		// 80
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 14: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 59: 41, 84: 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 14: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 59: 40, 84: 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 14: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 59: 39, 84: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 14: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 59: 38, 84: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 14: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 59: 37, 84: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 85
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 14: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 59: 36, 84: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 347, 302, 130: 423},
		{41: 421},
		{413},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 420, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 392},
		// 90
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 59: 30, 84: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 59: 28, 84: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 84: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 84: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 386, 302},
		// 95
		{2: 382},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 369, 111: 370, 117: 371},
		{11: 367},
		{366},
		{365},
		// 100
		{331, 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 330},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 335, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 61: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{333, 12: 332},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 59: 2, 84: 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 334, 102: 304},
		// 105
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 59: 1, 84: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{46, 10: 46, 12: 46, 46, 41: 46, 46},
		{9: 165, 11: 336, 165, 132: 337},
		{41: 363},
		{9: 339, 12: 338},
		// 110
		{11: 340},
		{64, 9: 64, 64, 12: 64, 64, 41: 64, 64},
		{41: 341},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 347, 302, 130: 342},
		{9: 163, 12: 163},
		// 115
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 61: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{104, 104, 350, 104, 104, 104, 349, 352, 351, 104, 104, 12: 104, 104, 41: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 58: 104, 61: 104, 104, 69: 104, 104, 104, 104, 104, 104, 104, 104, 353, 104, 104, 104},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 348, 345},
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 95, 41: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 61: 95, 95},
		{9: 45, 12: 45, 41: 45},
		// 120
		{101, 101, 3: 101, 101, 101, 9: 101, 101, 12: 101, 101, 41: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 58: 101, 61: 101, 101, 69: 101, 101, 101, 101, 101, 101, 101, 101, 78: 101, 101, 101},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 361},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 13: 355, 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 357, 102: 304, 128: 356},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 41: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 58: 109, 61: 109, 109, 69: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 41: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 58: 108, 61: 108, 108, 69: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		// 125
		{11: 354},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 41: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 58: 107, 61: 107, 107, 69: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 41: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 58: 111, 61: 111, 111, 69: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{12: 359, 358},
		{9: 106, 12: 106, 106},
		// 130
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 41: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 58: 110, 61: 110, 110, 69: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 360, 102: 304},
		{9: 105, 12: 105, 105},
		{12: 332, 42: 362},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 41: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 58: 113, 61: 113, 113, 69: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		// 135
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 347, 302, 130: 364},
		{9: 164, 12: 164},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 84: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 14: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 59: 4, 84: 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{368},
		// 140
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 59: 5, 84: 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{380, 10: 249, 12: 332, 110: 381},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 111: 376},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 111: 372},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 373, 374},
		// 145
		{10: 249, 12: 332, 110: 375},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 59: 7, 84: 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 59: 6, 84: 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 377, 378},
		{10: 249, 12: 332, 110: 379},
		// 150
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 59: 9, 84: 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 59: 8, 84: 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 59: 25, 84: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 59: 10, 84: 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 383, 302},
		// 155
		{13: 384},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 385},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 84: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{10: 387, 110: 388},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 389, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 318, 124: 390},
		// 160
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 84: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{413, 121: 396, 125: 414, 397, 133: 415},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 391, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 392},
		{393, 121: 396, 125: 395, 397, 133: 394},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 59: 29, 84: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 165
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 59: 31, 84: 31, 31, 31, 31, 31, 31, 31, 31, 31, 101: 31, 103: 31, 31, 31, 31, 31, 31},
		{410, 121: 396, 125: 409, 411},
		{408},
		{10: 399, 84: 398},
		{14, 121: 14},
		// 170
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 403, 302},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 401, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 318, 124: 400},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 402, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 392},
		{11},
		{12},
		// 175
		{10: 404},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 406, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 318, 124: 405},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 407, 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 392},
		{15, 121: 15},
		{16, 121: 16},
		// 180
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 59: 23, 84: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{412},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 14: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 59: 21, 84: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{13, 121: 13},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 59: 24, 84: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		// 185
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 14: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59: 32, 84: 32, 32, 32, 32, 32, 32, 32, 32, 32, 101: 32, 103: 32, 32, 32, 32, 32, 32},
		{419},
		{416, 121: 396, 125: 417, 411},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 84: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{418},
		// 190
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 84: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 14: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 59: 22, 84: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{393},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 422},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 14: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 59: 33, 84: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 195
		{41: 424},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 425},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 14: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 59: 34, 84: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{4: 196, 6: 196, 11: 196, 13: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 101: 196},
		{4: 195, 6: 195, 11: 195, 13: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 101: 195},
		// 200
		{2: 428, 11: 427, 119: 467, 426},
		{4: 431, 6: 432, 11: 434, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 433, 60: 435, 101: 430, 122: 436},
		{2: 456, 146: 457},
		{4: 431, 6: 432, 11: 434, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 433, 60: 435, 101: 430, 122: 455},
		{27: 452, 42: 451},
		// 205
		{184, 12: 184, 184, 58: 184, 77: 449},
		{183, 12: 183, 183, 58: 183, 77: 447},
		{6: 444, 11: 443, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 442},
		{437, 58: 438},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 14: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 59: 44, 84: 44, 44, 44, 44, 44, 44, 44, 44, 44},
		// 210
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 440, 102: 304, 140: 439},
		{441},
		{42},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 14: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 59: 43, 84: 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{182, 12: 182, 182, 58: 182},
		// 215
		{181, 12: 181, 181, 58: 181},
		{27: 445},
		{42: 446},
		{6: 158, 11: 158, 14: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{11: 448},
		// 220
		{180, 12: 180, 180, 58: 180},
		{11: 450},
		{179, 12: 179, 179, 58: 179},
		{4: 431, 6: 432, 11: 434, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 433, 60: 435, 101: 430, 122: 454},
		{42: 453},
		// 225
		{6: 159, 11: 159, 14: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{185, 12: 185, 185, 58: 185},
		{186, 12: 186, 186, 58: 186},
		{11: 459, 13: 462, 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 460, 150: 461},
		{2: 456, 146: 458},
		// 230
		{187, 12: 187, 187, 58: 187},
		{12: 193, 193},
		{12: 192, 192},
		{12: 463, 464},
		{188, 2: 188, 12: 188, 188, 58: 188},
		// 235
		{11: 465, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 466},
		{189, 2: 189, 12: 189, 189, 58: 189},
		{12: 191, 191},
		{12: 190, 190},
		{13: 468},
		// 240
		{4: 194, 6: 194, 11: 194, 13: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 101: 194},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 474},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 471},
		{12: 332, 41: 472},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 473, 302},
		// 245
		{66, 9: 66, 66, 12: 66, 66, 41: 66, 66},
		{68, 9: 68, 68, 12: 68, 68, 41: 68, 68, 68, 68, 475},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 299, 476},
		{70, 9: 70, 70, 12: 70, 70, 41: 70, 70, 70, 70, 70, 477},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 298, 478},
		// 250
		{72, 9: 72, 72, 12: 72, 72, 41: 72, 72, 72, 72, 72, 72, 479},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 297, 480},
		{74, 481, 9: 74, 74, 12: 74, 74, 41: 74, 74, 74, 74, 74, 74, 74},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 296, 93: 482},
		{76, 76, 9: 76, 76, 12: 76, 76, 41: 76, 76, 76, 76, 76, 76, 76, 483, 486, 488, 485, 487, 484},
		// 255
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 510},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 509},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 508},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 507},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 506},
		// 260
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 295, 489},
		{78, 78, 9: 78, 78, 12: 78, 78, 41: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 492, 490, 491},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 505},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 504},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 294, 493},
		// 265
		{85, 85, 3: 495, 5: 494, 9: 85, 85, 12: 85, 85, 41: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 503},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 346, 345, 81: 496},
		{89, 89, 3: 89, 497, 89, 9: 89, 89, 12: 89, 89, 41: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 61: 498, 499},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 502, 345},
		// 270
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 501, 345},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 343, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 344, 282, 500, 345},
		{92, 92, 3: 92, 92, 92, 9: 92, 92, 12: 92, 92, 41: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 61: 92, 92},
		{93, 93, 3: 93, 93, 93, 9: 93, 93, 12: 93, 93, 41: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 61: 93, 93},
		{94, 94, 3: 94, 94, 94, 9: 94, 94, 12: 94, 94, 41: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 61: 94, 94},
		// 275
		{90, 90, 3: 90, 497, 90, 9: 90, 90, 12: 90, 90, 41: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 61: 498, 499},
		{86, 86, 3: 495, 5: 494, 9: 86, 86, 12: 86, 86, 41: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{87, 87, 3: 495, 5: 494, 9: 87, 87, 12: 87, 87, 41: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{79, 79, 9: 79, 79, 12: 79, 79, 41: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 492, 490, 491},
		{80, 80, 9: 80, 80, 12: 80, 80, 41: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 492, 490, 491},
		// 280
		{81, 81, 9: 81, 81, 12: 81, 81, 41: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 492, 490, 491},
		{82, 82, 9: 82, 82, 12: 82, 82, 41: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 492, 490, 491},
		{83, 83, 9: 83, 83, 12: 83, 83, 41: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 492, 490, 491},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 524, 102: 304},
		{1: 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 14: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		// 285
		{1: 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 14: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{1: 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 14: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{1: 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 14: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{1: 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 14: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{1: 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 14: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 290
		{1: 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 14: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 14: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{1: 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 14: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{1: 50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 14: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{1: 49, 49, 49, 49, 49, 49, 49, 49, 11: 49, 14: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 295
		{1: 48, 48, 48, 48, 48, 48, 48, 48, 11: 48, 14: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{60, 9: 60, 60, 12: 60, 60, 41: 60, 60},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 526, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 61: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{9: 165, 11: 336, 165, 132: 527},
		{9: 528, 12: 338},
		// 300
		{63, 9: 63, 63, 12: 63, 63, 41: 63, 63},
		{102, 102, 3: 102, 102, 102, 9: 102, 102, 12: 102, 102, 41: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 58: 102, 61: 102, 102, 69: 102, 102, 102, 102, 102, 102, 102, 102, 78: 102, 102, 102},
		{103, 103, 3: 103, 103, 103, 9: 103, 103, 12: 103, 103, 41: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 58: 103, 61: 103, 103, 69: 103, 103, 103, 103, 103, 103, 103, 103, 78: 103, 103, 103},
		{11: 533, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 532, 147: 534},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 41: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 58: 116, 61: 116, 116, 69: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		// 305
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 41: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 58: 115, 61: 115, 115, 69: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 41: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 58: 112, 61: 112, 112, 69: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{11: 536},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 537, 12: 107, 107, 41: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 58: 107, 61: 107, 107, 69: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{9: 165, 11: 336, 165, 132: 538},
		// 310
		{9: 539, 12: 338},
		{62, 9: 62, 62, 12: 62, 62, 41: 62, 62},
		{12: 332, 541},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 41: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 58: 119, 61: 119, 119, 69: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{9: 137, 11: 543, 127: 544, 152: 545, 546},
		// 315
		{2: 551},
		{550},
		{9: 136, 11: 543, 127: 548},
		{9: 547},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 41: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 58: 132, 61: 132, 132, 69: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		// 320
		{549},
		{9: 138, 11: 138},
		{9: 139, 11: 139},
		{11: 552, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 553, 57: 554, 127: 556, 151: 555},
		{2: 551, 12: 146, 146},
		// 325
		{12: 145, 145},
		{77: 565},
		{12: 561, 562},
		{12: 558, 557},
		{141, 12: 141, 141},
		// 330
		{11: 543, 127: 559},
		{13: 560},
		{140, 12: 140, 140},
		{11: 563},
		{142, 12: 142, 142},
		// 335
		{13: 564},
		{143, 12: 143, 143},
		{11: 566},
		{12: 144, 144},
		{321, 288, 279, 291, 289, 290, 263, 286, 285, 10: 249, 265, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 59: 307, 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 322, 327, 314, 326, 315, 324, 325, 328, 323, 297, 298, 299, 300, 301, 303, 302, 305, 102: 304, 109: 306, 309, 310, 312, 313, 308, 311, 320, 319, 568},
		// 340
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 14: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 59: 35, 84: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{10: 581},
		{10: 571},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 575, 573, 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 572, 102: 304, 129: 574},
		{9: 162, 12: 162},
		// 345
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 10: 573, 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 572, 102: 304, 129: 579},
		{9: 577, 12: 576},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 12: 152, 152, 41: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 58: 152, 61: 152, 152, 69: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 578, 102: 304},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 41: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 58: 153, 61: 153, 153, 69: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		// 350
		{9: 160, 12: 160},
		{9: 580, 12: 576},
		{9: 161, 12: 161},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 583, 573, 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 572, 102: 304, 129: 582},
		{9: 584, 12: 576},
		// 355
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 12: 154, 154, 41: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 58: 154, 61: 154, 154, 69: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 12: 155, 155, 41: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 58: 155, 61: 155, 155, 69: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155},
		{6: 586, 11: 587, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 588, 63: 589},
		{42: 585},
		{10: 594},
		// 360
		{10: 590},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 12: 147, 147, 41: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 58: 147, 61: 147, 147, 69: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 592, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 357, 102: 304, 128: 591},
		{9: 593, 12: 359},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 12: 148, 148, 41: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 58: 148, 61: 148, 148, 69: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148},
		// 365
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 12: 149, 149, 41: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 58: 149, 61: 149, 149, 69: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 596, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 357, 102: 304, 128: 595},
		{9: 597, 12: 359},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 12: 150, 150, 41: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 58: 150, 61: 150, 150, 69: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 12: 151, 151, 41: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 58: 151, 61: 151, 151, 69: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		// 370
		{59: 203, 101: 203, 103: 203, 203, 203, 203, 203, 203},
		{2: 206, 10: 206},
		{13: 607},
		{12: 605, 202},
		{12: 201, 201},
		// 375
		{4: 431, 6: 432, 11: 434, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 433, 60: 435, 101: 430, 122: 604},
		{199, 12: 199, 199},
		{2: 428, 11: 427, 119: 603, 426, 123: 606},
		{12: 200, 200},
		{2: 205, 10: 205},
		// 380
		{2: 208},
		{2: 428, 11: 427, 119: 603, 426, 123: 602, 142: 601, 610},
		{13: 611},
		{11: 612},
		{2: 207},
		// 385
		{614},
		{59: 209, 101: 209, 103: 209, 209, 209, 209, 209, 209},
		{616},
		{59: 210, 101: 210, 103: 210, 210, 210, 210, 210, 210},
		{154: 618},
		// 390
		{10: 620, 155: 619},
		{59: 215, 101: 215, 103: 215, 215, 215, 215, 215, 215},
		{2: 428, 9: 621, 11: 427, 119: 603, 426, 123: 623, 149: 622},
		{629},
		{2: 428, 9: 625, 11: 427, 119: 603, 426, 123: 626},
		// 395
		{624},
		{2: 212, 9: 212, 11: 212},
		{628},
		{627},
		{2: 211, 9: 211, 11: 211},
		// 400
		{59: 213, 101: 213, 103: 213, 213, 213, 213, 213, 213},
		{59: 214, 101: 214, 103: 214, 214, 214, 214, 214, 214},
		{4: 431, 6: 432, 11: 434, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 57: 433, 60: 435, 101: 430, 122: 631},
		{632, 58: 633},
		{59: 217, 101: 217, 103: 217, 217, 217, 217, 217, 217},
		// 405
		{1: 288, 279, 291, 289, 290, 263, 286, 285, 11: 329, 14: 250, 251, 253, 254, 256, 257, 258, 255, 252, 260, 261, 262, 259, 271, 267, 268, 269, 278, 277, 266, 272, 292, 270, 273, 275, 276, 274, 57: 284, 60: 264, 63: 281, 280, 283, 282, 293, 287, 81: 294, 295, 296, 93: 297, 298, 299, 300, 301, 303, 302, 440, 102: 304, 140: 634},
		{635},
		{59: 216, 101: 216, 103: 216, 216, 216, 216, 216, 216},
		{59: 218, 101: 218, 103: 218, 218, 218, 218, 218, 218},
		{3: 135, 27: 135, 59: 135, 101: 135, 103: 135, 135, 135, 135, 135, 135},
		// 410
		{27: 639},
		{3: 134, 27: 134, 59: 134, 101: 134, 103: 134, 134, 134, 134, 134, 134},
		{3: 638, 27: 637, 131: 641},
		{59: 219, 101: 219, 103: 219, 219, 219, 219, 219, 219},
		{59: 226, 101: 226, 103: 226, 226, 226, 226, 226, 226},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 177

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 11:
		{
			DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 12:
		{
			DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-3].argument, nil, false)
		}
	case 13:
		{
			DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 14:
		{
			yyVAL.arguments = nil
		}
	case 15:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 16:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 17:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 18:
		{
			DeclarePackage(yyS[yypt-1].tok)
		}
	case 19:
		{
			DeclareImport(yyS[yypt-1].tok, CurrentFileName, lineNo)
		}
	case 20:
		{
			if pkg, err := PRGRM0.GetCurrentPackage(); err == nil {
				fn := MakeFunction(yyS[yypt-0].tok, CurrentFileName, lineNo)
				pkg.AddFunction(fn)

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 21:
		{
			if len(yyS[yypt-2].arguments) > 1 {
				panic("method has multiple receivers")
			}

			fnName := yyS[yypt-2].arguments[0].CustomType.Name + "." + yyS[yypt-0].tok

			if pkg, err := PRGRM0.GetCurrentPackage(); err == nil {
				fn := MakeFunction(fnName, CurrentFileName, lineNo)
				pkg.AddFunction(fn)

				fn.AddInput(yyS[yypt-2].arguments[0])

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 22:
		{
			yyVAL.arguments = nil
		}
	case 23:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 24:
		{
			PreFunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil)
		}
	case 25:
		{
			PreFunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments)
		}
	case 27:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 28:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 29:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			yyS[yypt-0].argument.IsLocalDeclaration = true
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 33:
		{
			if pkg, err := PRGRM0.GetCurrentPackage(); err == nil {
				arg := MakeArgument("", CurrentFile, LineNo)
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 34:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 35:
		{
			arg := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.arguments = []*CXArgument{arg}
		}
	case 36:
		{
			arg := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = []*CXArgument{arg}
		}
	case 37:
		{
			arg := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 38:
		{
			arg := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 39:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 40:
		{
			yyVAL.arguments = nil
		}
	case 41:
		{
			arg := MakeArgument("", CurrentFile, LineNo).AddType("func")
			arg.Inputs = yyS[yypt-1].arguments
			arg.Outputs = yyS[yypt-0].arguments
			yyVAL.argument = DeclarationSpecifiers(arg, []int{0}, DECL_FUNC)
		}
	case 42:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, DECL_POINTER)
		}
	case 43:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, DECL_SLICE)
		}
	case 44:
		{
			yyVAL.argument = DeclarationSpecifiersBasic(yyS[yypt-0].i)
		}
	case 45:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFileName, lineNo)
		}
	case 46:
		{
			basic := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.argument = DeclarationSpecifiers(basic, yyS[yypt-1].ints, DECL_ARRAY)
		}
	case 47:
		{
			strct := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.argument = DeclarationSpecifiers(strct, yyS[yypt-1].ints, DECL_ARRAY)
		}
	case 48:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true, CurrentFileName, lineNo)
		}
	case 49:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, TypeNames[yyS[yypt-2].i], true, CurrentFileName, lineNo)
		}
	case 50:
		{
			yyVAL.i = TYPE_AFF
		}
	case 51:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 52:
		{
			yyVAL.i = TYPE_STR
		}
	case 53:
		{
			yyVAL.i = TYPE_F32
		}
	case 54:
		{
			yyVAL.i = TYPE_F64
		}
	case 55:
		{
			yyVAL.i = TYPE_I8
		}
	case 56:
		{
			yyVAL.i = TYPE_I16
		}
	case 57:
		{
			yyVAL.i = TYPE_I32
		}
	case 58:
		{
			yyVAL.i = TYPE_I64
		}
	case 59:
		{
			yyVAL.i = TYPE_UI8
		}
	case 60:
		{
			yyVAL.i = TYPE_UI16
		}
	case 61:
		{
			yyVAL.i = TYPE_UI32
		}
	case 62:
		{
			yyVAL.i = TYPE_UI64
		}
	case 69:
		{
			yyVAL.ints = []int{int(yyS[yypt-1].i32)}
		}
	case 70:
		{
			yyVAL.ints = append(yyS[yypt-3].ints, int(yyS[yypt-1].i32))
		}
	case 71:
		{
			yyVAL.ints = []int{0}
		}
	case 72:
		{
			yyVAL.ints = append(yyS[yypt-2].ints, 0)
		}
	case 93:
		{
			yyVAL.i32 = yyS[yypt-0].i32
		}
	case 94:
		{
			yyVAL.i32 = -yyS[yypt-0].i32
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
