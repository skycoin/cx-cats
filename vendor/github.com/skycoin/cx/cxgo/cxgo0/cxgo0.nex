<      {
}
/(\r\n|\r|\n)/ {
	lval.line++
	lineNo++
	token := f(NEWLINE)
	if token != NEWLINE {
		return token
	}
}
/(\t| )/ {
	/* skip blanks and tabs */
}
/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|\/\/[^\n\r]*/ {
	/* skip comments */
	noLines := countNewLines([]byte(yylex.Text()))
	lval.line += noLines
        lineNo += noLines
}
/aff/                     { lval.tok = yylex.Text(); return f(AFF)  }
/bool/                    { lval.tok = yylex.Text(); return f(BOOL) }
/break/                   { return f(BREAK) }
/case/                    { return f(CASE) }
/const/                   { return f(CONST) }
/continue/                { return f(CONTINUE) }
/default/                 { return f(DEFAULT) }
/else/                    { return f(ELSE) }
/enum/                    { return f(ENUM) }
/f32/                     { lval.tok = yylex.Text(); return f(F32) }
/f64/                     { lval.tok = yylex.Text(); return f(F64) }
/for/                     { return f(FOR)}
/goto/                    { return f(GOTO)}
/i8/                      { lval.tok = yylex.Text(); return f(I8)}
/i16/                     { lval.tok = yylex.Text(); return f(I16)}
/i32/                     { lval.tok = yylex.Text(); return f(I32)}
/i64/                     { lval.tok = yylex.Text(); return f(I64)}
/if/                      { return f(IF)}
/new/                     { return f(NEW)}
/return/                  { return f(RETURN)}
/str/                     { return f(STR)}
/struct/                  { return f(STRUCT)}
/switch/                  { return f(SWITCH)}
/type/                    { return f(TYPE)}
/ui8/                     { lval.tok = yylex.Text(); return f(UI8)}
/ui16/                    { lval.tok = yylex.Text(); return f(UI16)}
/ui32/                    { lval.tok = yylex.Text(); return f(UI32)}
/ui64/                    { lval.tok = yylex.Text(); return f(UI64)}
/union/                   { return f(UNION) }
/#/                      { return f(INFER)      }
/&/                       { lval.tok = yylex.Text(); return f(REF_OP) }
/\+/                      { lval.tok = yylex.Text(); return f(ADD_OP) }
/-/                       { lval.tok = yylex.Text(); return f(SUB_OP) }
/\*/                      { lval.tok = yylex.Text(); return f(MUL_OP) }
/\//                      { lval.tok = yylex.Text(); return f(DIV_OP) }
/%/                       { lval.tok = yylex.Text(); return f(MOD_OP) }
/>/                       { return f(GT_OP) }
/</                       { return f(LT_OP) }
/>=/                      { return f(GTEQ_OP) }
/<=/                      { return f(LTEQ_OP) }
/>>=/                     { return f(RIGHT_ASSIGN)}
/<<=/                     { return f(LEFT_ASSIGN)}
/\+=/                     { return f(ADD_ASSIGN)}
/-=/                      { return f(SUB_ASSIGN)}
/\*=/                     { return f(MUL_ASSIGN)}
/\/=/                     { return f(DIV_ASSIGN)}
/%=/                      { return f(MOD_ASSIGN)}
/&=/                      { return f(AND_ASSIGN)}
/\^=/                     { return f(XOR_ASSIGN)}
/\|=/                     { return f(OR_ASSIGN)}
/>>/                      { return f(RIGHT_OP)}
/<</                      { return f(LEFT_OP)}
/\+\+/                    { return f(INC_OP)}
/--/                      { return f(DEC_OP)}
/&&/                      { return f(AND_OP)}
/\|\|/                      { return f(OR_OP)}
/<=/                      { return f(LE_OP)}
/>=/                      { return f(GE_OP)}
/==/                      { return f(EQ_OP)}
/\|/                      { return f(BITOR_OP)}
/&\^/                     { return f(BITCLEAR_OP)}
/\^/                      { return f(BITXOR_OP)}
/!=/                      { return f(NE_OP)}
/;/                       { return f(SEMICOLON) }
/:/                       { return f(COLON) }
/!/                       { lval.tok = yylex.Text(); return f(NEG_OP) }
/\[/                      { return f(LBRACK) }
/\]/                      { return f(RBRACK) }
/\(/                      { return f(LPAREN) }
/\)/                      { return f(RPAREN) }
/\{/                      { return f(LBRACE) }
/\}/                      { return f(RBRACE) }
/\./                      { return f(PERIOD) }
/,/                       { return f(COMMA) }
/=/                       { return f(ASSIGN) }
/:=/                      { return f(CASSIGN) }
/(:dl)|(:dLocals)/        { return f(DSTATE)     }
/(:ds)|(:dStack)/         { return f(DSTACK)     }
/(:dProgram)|(:dp)/       { return f(DPROGRAM)   }
/:package/                {
	lval.line = 0
	yylex.stack[len(yylex.stack) - 1].line = 0
	return f(SPACKAGE)
}
/:struct/                 { return f(SSTRUCT)    }
/:func/                   { return f(SFUNC)      }
/:rem/                    { return f(REM)        }
/:step/                   { return f(STEP)       }
/:tStep/                  { return f(TSTEP)      }
/:tstep/                  { return f(TSTEP)      }
/:pStep/                  { return f(PSTEP)      }
/:aff/                    { return f(CAFF)       }
/package/                 { return f(PACKAGE)    }
/type/                    { return f(TYPSTRUCT)  }
/struct/                  { return f(STRUCT)     }
/return/                  { return f(RETURN)     }
/goto/                    { return f(GOTO)       }
/if/                      { return f(IF)         }
/for/                     { return f(FOR)        }
/func/                    { return f(FUNC)       }
/clauses/                 { return f(CLAUSES)    }
/def/                     { return f(DEF)        }
/field/                   { return f(FIELD)      }
/import/                  { return f(IMPORT)     }
/var/                     { return f(VAR)        }
/"([^"\\]|\\.)*"/ { /* " */
	str, err := strconv.Unquote(yylex.Text())
	if err != nil {
	        println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "illegal characters in string", yylex.Text())
	}
	lval.tok = str
	lval.line = lval.line + countNewLines([]byte(lval.tok))
	return f(STRING_LITERAL)
}
/\`([^\`]*)\`/ { /* ` */
	tokVal := yylex.Text()
	tokVal = strings.TrimPrefix(tokVal, "`")
	tokVal = strings.TrimSuffix(tokVal, "`")
	lval.tok = tokVal
	lval.line = lval.line + countNewLines([]byte(lval.tok))
	return f(STRING_LITERAL)
}
/true/ {
	// lval.i32 = int32(1)
	lval.bool = true
	return f(BOOLEAN_LITERAL)
}
/false/ {
	// lval.i32 = int32(0)
	lval.bool = false
	return f(BOOLEAN_LITERAL)
}
/[0-9]+B/ {
	result, err := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 8)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid i8 literal", yylex.Text())
	}
	lval.i8 = int8(result)
	return f(BYTE_LITERAL)
}
/[0-9]+H/ {
	result, err := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 16)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid i16 literal", yylex.Text())
	}
	lval.i16 = int16(result)
	return f(SHORT_LITERAL)
}
/[0-9]+/ {
	result, err := strconv.ParseInt(yylex.Text()[:len(yylex.Text())], 10, 32)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid i32 literal", yylex.Text())
	}
	lval.i32 = int32(result)
	return f(INT_LITERAL)
}
/[0-9]+L/ {
	result, err := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 64)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid i64 literal", yylex.Text())
	}
	lval.i64 = result
	return f(LONG_LITERAL)
}
/[0-9]+UB/ {
	result, err := strconv.ParseUint(yylex.Text()[:len(yylex.Text()) - 2], 10, 8)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid ui8 literal", yylex.Text())
	}
	lval.ui8 = uint8(result)
	return f(UNSIGNED_BYTE_LITERAL)
}
/[0-9]+UH/ {
	result, err := strconv.ParseUint(yylex.Text()[:len(yylex.Text()) - 2], 10, 16)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid ui16 literal", yylex.Text())
	}
	lval.ui16 = uint16(result)
	return f(UNSIGNED_SHORT_LITERAL)
}
/[0-9]+U/ {
	result, err := strconv.ParseUint(yylex.Text()[:len(yylex.Text()) - 1], 10, 32)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid ui32 literal", yylex.Text())
	}
	lval.ui32 = uint32(result)
	return f(UNSIGNED_INT_LITERAL)
}
/[0-9]+UL/ {
	result, err := strconv.ParseUint(yylex.Text()[:len(yylex.Text()) - 2], 10, 64)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid ui64 literal", yylex.Text())
	}
	lval.ui64 = result
	return f(UNSIGNED_LONG_LITERAL)
}
/([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][-+]?[0-9]+)?/ {
	result, err := strconv.ParseFloat(yylex.Text(), 32)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid f32 literal", yylex.Text())
	}
	lval.f32 = float32(result)
	return f(FLOAT_LITERAL)
}
/([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][-+]?[0-9]+)?D/ {
	result, err := strconv.ParseFloat(yylex.Text()[:len(yylex.Text()) - 1], 64)
	if err != nil {
		println(cxcore.CompilationError(CurrentFileName, yylex.Line()), "invalid f64 literal", yylex.Text())
	}
	lval.f64 = float64 (result)
	return f(DOUBLE_LITERAL)
}
/[_a-zA-Z][_a-zA-Z0-9]*/ {
	lval.tok = yylex.Text()
	return f(IDENTIFIER)
}
>      {
}
//
package cxgo0
import (
	"fmt"
	"strconv"
	
	"github.com/skycoin/cx/cx"
)

var CurrentFileName string
var insert bool

func f (token int) int {
	if insert && token == NEWLINE {
		insert = false
		return SEMICOLON
	} else {
		switch token {
		case IDENTIFIER,

			BOOL, STR,
			I8, I16, I32, I64,
			UI8, UI16, UI32, UI64,
			F32, F64, AFF,

			BOOLEAN_LITERAL, STRING_LITERAL,
			BYTE_LITERAL, SHORT_LITERAL, INT_LITERAL, LONG_LITERAL,
			UNSIGNED_BYTE_LITERAL, UNSIGNED_SHORT_LITERAL, UNSIGNED_INT_LITERAL, UNSIGNED_LONG_LITERAL,
			FLOAT_LITERAL, DOUBLE_LITERAL,

			RETURN, BREAK, CONTINUE,
			INC_OP, DEC_OP,

			RPAREN, RBRACE, RBRACK:
			insert = true
		default: insert = false
		}
		return token
	}
}

func countNewLines (s []byte) int {
	count := 0
	for i := 0; i < len(s); i++ {
		if s[i] == '\n' {
			count++
		}
	}
	return count
}

func (yylex Lexer) Error (e string) {
	if inREPL {
		fmt.Printf("syntax error: %s\n", e)
	} else {
		fmt.Printf("%s:%d: syntax error: %s\n", CurrentFileName, yylex.Line() + 1, e)
	}
	
	yylex.Stop()
}

func main () {
	
}
