// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	// "fmt"
	. "github.com/skycoin/cx/cx"
	. "github.com/skycoin/cx/cxgo/actions"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"strconv"
)

// var PRGRM = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)

func Parse(lexer *Lexer) int {
	return yyParse(lexer)
}

type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	SelectStatement  SelectStatement
	SelectStatements []SelectStatement

	ReturnExpressions ReturnExpressions

	arrayArguments [][]*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault              = 57495
	yyEofCode              = 57344
	ADDR                   = 57492
	ADD_ASSIGN             = 57439
	ADD_OP                 = 57399
	AFF                    = 57487
	AFFVAR                 = 57406
	AND                    = 57397
	AND_ASSIGN             = 57440
	AND_OP                 = 57437
	ASSIGN                 = 57379
	BASICTYPE              = 57470
	BITANDEQ               = 57425
	BITCLEAR_OP            = 57416
	BITOREQ                = 57427
	BITOR_OP               = 57415
	BITXOREQ               = 57426
	BITXOR_OP              = 57414
	BOOL                   = 57449
	BOOLEAN_LITERAL        = 57346
	BREAK                  = 57467
	BYTE_LITERAL           = 57347
	CAFF                   = 57488
	CASE                   = 57464
	CASSIGN                = 57380
	CLAUSES                = 57478
	COLON                  = 57389
	COMMA                  = 57367
	COMMENT                = 57369
	CONST                  = 57463
	CONTINUE               = 57468
	DEC_OP                 = 57428
	DEF                    = 57475
	DEFAULT                = 57465
	DIVEQ                  = 57420
	DIV_ASSIGN             = 57444
	DIV_OP                 = 57402
	DOUBLE_LITERAL         = 57356
	DPROGRAM               = 57485
	DSTACK                 = 57484
	DSTATE                 = 57486
	ELSE                   = 57373
	ENUM                   = 57462
	EQUAL                  = 57388
	EQUALWORD              = 57391
	EQ_OP                  = 57435
	EXP                    = 57412
	EXPEQ                  = 57422
	EXPR                   = 57476
	F32                    = 57450
	F64                    = 57451
	FIELD                  = 57477
	FLOAT_LITERAL          = 57355
	FOR                    = 57374
	FUNC                   = 57357
	GE_OP                  = 57433
	GOTO                   = 57383
	GTEQ_OP                = 57386
	GTHANEQ                = 57394
	GTHANWORD              = 57392
	GT_OP                  = 57384
	I16                    = 57453
	I32                    = 57454
	I64                    = 57455
	I8                     = 57452
	IDENTIFIER             = 57365
	IF                     = 57372
	IMPORT                 = 57381
	INC_OP                 = 57429
	INFER                  = 57490
	INT_LITERAL            = 57349
	LBRACE                 = 57361
	LBRACK                 = 57363
	LEFTSHIFT              = 57410
	LEFTSHIFTEQ            = 57423
	LEFT_ASSIGN            = 57441
	LEFT_OP                = 57431
	LE_OP                  = 57434
	LONG_LITERAL           = 57350
	LPAREN                 = 57359
	LTEQ_OP                = 57387
	LTHANEQ                = 57395
	LTHANWORD              = 57393
	LT_OP                  = 57385
	MINUSEQ                = 57418
	MINUSMINUS             = 57408
	MOD_ASSIGN             = 57442
	MOD_OP                 = 57403
	MULTEQ                 = 57419
	MUL_ASSIGN             = 57443
	MUL_OP                 = 57401
	NEG_OP                 = 57405
	NEW                    = 57390
	NEWLINE                = 57378
	NE_OP                  = 57436
	NOT                    = 57413
	OBJECT                 = 57479
	OBJECTS                = 57480
	OP                     = 57358
	OR                     = 57398
	OR_ASSIGN              = 57445
	OR_OP                  = 57438
	PACKAGE                = 57371
	PERIOD                 = 57368
	PLUSEQ                 = 57417
	PLUSPLUS               = 57407
	PSTEP                  = 57482
	PTR_OP                 = 57430
	RBRACE                 = 57362
	RBRACK                 = 57364
	REF_OP                 = 57404
	REM                    = 57474
	REMAINDER              = 57409
	REMAINDEREQ            = 57421
	RETURN                 = 57382
	RIGHTSHIFT             = 57411
	RIGHTSHIFTEQ           = 57424
	RIGHT_ASSIGN           = 57446
	RIGHT_OP               = 57432
	RPAREN                 = 57360
	SEMICOLON              = 57377
	SFUNC                  = 57473
	SHORT_LITERAL          = 57348
	SPACKAGE               = 57471
	SSTRUCT                = 57472
	STEP                   = 57481
	STR                    = 57456
	STRING_LITERAL         = 57370
	STRUCT                 = 57376
	SUB_ASSIGN             = 57447
	SUB_OP                 = 57400
	SWITCH                 = 57466
	TAG                    = 57489
	TSTEP                  = 57483
	TYPE                   = 57469
	TYPSTRUCT              = 57375
	UI16                   = 57458
	UI32                   = 57459
	UI64                   = 57460
	UI8                    = 57457
	UNEQUAL                = 57396
	UNION                  = 57461
	UNSIGNED_BYTE_LITERAL  = 57351
	UNSIGNED_INT_LITERAL   = 57353
	UNSIGNED_LONG_LITERAL  = 57354
	UNSIGNED_SHORT_LITERAL = 57352
	VALUE                  = 57491
	VAR                    = 57366
	XOR_ASSIGN             = 57448
	yyErrCode              = 57345

	yyMaxDepth = 200
	yyTabOfs   = -240
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57377: 0,   // SEMICOLON (217x)
		57404: 1,   // REF_OP (210x)
		57359: 2,   // LPAREN (209x)
		57401: 3,   // MUL_OP (203x)
		57400: 4,   // SUB_OP (203x)
		57399: 5,   // ADD_OP (199x)
		57363: 6,   // LBRACK (197x)
		57428: 7,   // DEC_OP (184x)
		57429: 8,   // INC_OP (184x)
		57362: 9,   // RBRACE (182x)
		57361: 10,  // LBRACE (179x)
		57365: 11,  // IDENTIFIER (178x)
		57367: 12,  // COMMA (159x)
		57357: 13,  // FUNC (155x)
		57487: 14,  // AFF (145x)
		57449: 15,  // BOOL (145x)
		57450: 16,  // F32 (145x)
		57451: 17,  // F64 (145x)
		57453: 18,  // I16 (145x)
		57454: 19,  // I32 (145x)
		57455: 20,  // I64 (145x)
		57452: 21,  // I8 (145x)
		57360: 22,  // RPAREN (145x)
		57456: 23,  // STR (145x)
		57458: 24,  // UI16 (145x)
		57459: 25,  // UI32 (145x)
		57460: 26,  // UI64 (145x)
		57457: 27,  // UI8 (145x)
		57349: 28,  // INT_LITERAL (136x)
		57370: 29,  // STRING_LITERAL (129x)
		57346: 30,  // BOOLEAN_LITERAL (128x)
		57347: 31,  // BYTE_LITERAL (128x)
		57356: 32,  // DOUBLE_LITERAL (128x)
		57355: 33,  // FLOAT_LITERAL (128x)
		57490: 34,  // INFER (128x)
		57350: 35,  // LONG_LITERAL (128x)
		57405: 36,  // NEG_OP (128x)
		57348: 37,  // SHORT_LITERAL (128x)
		57351: 38,  // UNSIGNED_BYTE_LITERAL (128x)
		57353: 39,  // UNSIGNED_INT_LITERAL (128x)
		57354: 40,  // UNSIGNED_LONG_LITERAL (128x)
		57352: 41,  // UNSIGNED_SHORT_LITERAL (128x)
		57389: 42,  // COLON (104x)
		57364: 43,  // RBRACK (103x)
		63:    44,  // '?' (89x)
		57438: 45,  // OR_OP (89x)
		57437: 46,  // AND_OP (88x)
		57415: 47,  // BITOR_OP (86x)
		57414: 48,  // BITXOR_OP (84x)
		57485: 49,  // DPROGRAM (80x)
		57435: 50,  // EQ_OP (80x)
		57384: 51,  // GT_OP (80x)
		57386: 52,  // GTEQ_OP (80x)
		57385: 53,  // LT_OP (80x)
		57387: 54,  // LTEQ_OP (80x)
		57436: 55,  // NE_OP (80x)
		57473: 56,  // SFUNC (80x)
		57471: 57,  // SPACKAGE (80x)
		57472: 58,  // SSTRUCT (80x)
		57416: 59,  // BITCLEAR_OP (78x)
		57431: 60,  // LEFT_OP (78x)
		57432: 61,  // RIGHT_OP (78x)
		57481: 62,  // STEP (77x)
		57483: 63,  // TSTEP (77x)
		57366: 64,  // VAR (77x)
		57563: 65,  // type_specifier (74x)
		57379: 66,  // ASSIGN (73x)
		57402: 67,  // DIV_OP (67x)
		57529: 68,  // indexing_literal (67x)
		57403: 69,  // MOD_OP (67x)
		57554: 70,  // slice_literal_expression (63x)
		57500: 71,  // array_literal_expression (62x)
		57372: 72,  // IF (62x)
		57547: 73,  // postfix_expression (62x)
		57548: 74,  // primary_expression (62x)
		57565: 75,  // unary_expression (62x)
		57566: 76,  // unary_operator (62x)
		57467: 77,  // BREAK (61x)
		57464: 78,  // CASE (61x)
		57468: 79,  // CONTINUE (61x)
		57465: 80,  // DEFAULT (61x)
		57374: 81,  // FOR (61x)
		57383: 82,  // GOTO (61x)
		57382: 83,  // RETURN (61x)
		57466: 84,  // SWITCH (61x)
		57439: 85,  // ADD_ASSIGN (60x)
		57440: 86,  // AND_ASSIGN (60x)
		57380: 87,  // CASSIGN (60x)
		57444: 88,  // DIV_ASSIGN (60x)
		57441: 89,  // LEFT_ASSIGN (60x)
		57442: 90,  // MOD_ASSIGN (60x)
		57443: 91,  // MUL_ASSIGN (60x)
		57445: 92,  // OR_ASSIGN (60x)
		57368: 93,  // PERIOD (60x)
		57446: 94,  // RIGHT_ASSIGN (60x)
		57447: 95,  // SUB_ASSIGN (60x)
		57448: 96,  // XOR_ASSIGN (60x)
		57542: 97,  // multiplicative_expression (55x)
		57496: 98,  // additive_expression (53x)
		57553: 99,  // shift_expression (50x)
		57549: 100, // relational_expression (44x)
		57498: 101, // and_expression (43x)
		57517: 102, // exclusive_or_expression (42x)
		57528: 103, // inclusive_or_expression (41x)
		57540: 104, // logical_and_expression (40x)
		57507: 105, // conditional_expression (39x)
		57541: 106, // logical_or_expression (39x)
		57560: 107, // struct_literal_expression (33x)
		57381: 108, // IMPORT (32x)
		57371: 109, // PACKAGE (32x)
		57469: 110, // TYPE (32x)
		57344: 111, // $end (31x)
		57502: 112, // assignment_expression (31x)
		57506: 113, // compound_statement (19x)
		57518: 114, // expression (19x)
		57509: 115, // debugging (14x)
		57519: 116, // expression_statement (14x)
		57552: 117, // selector (14x)
		57537: 118, // iteration_statement (12x)
		57538: 119, // jump_statement (12x)
		57539: 120, // labeled_statement (12x)
		57551: 121, // selection_statement (12x)
		57556: 122, // statement (12x)
		57557: 123, // stepping (11x)
		57504: 124, // block_item (9x)
		57510: 125, // declaration (9x)
		57512: 126, // declarator (8x)
		57513: 127, // direct_declarator (8x)
		57373: 128, // ELSE (8x)
		57511: 129, // declaration_specifiers (5x)
		57544: 130, // parameter_declaration (5x)
		57505: 131, // block_item_list (4x)
		57514: 132, // else_statement (4x)
		57515: 133, // elseif (4x)
		57531: 134, // infer_action (4x)
		57536: 135, // int_value (4x)
		57508: 136, // constant_expression (3x)
		57561: 137, // struct_literal_fields (3x)
		57501: 138, // array_literal_expression_list (2x)
		57516: 139, // elseif_list (2x)
		57520: 140, // external_declaration (2x)
		57522: 141, // function_declaration (2x)
		57523: 142, // function_header (2x)
		57524: 143, // function_parameters (2x)
		57525: 144, // global_declaration (2x)
		57527: 145, // import_declaration (2x)
		57535: 146, // initializer (2x)
		57543: 147, // package_declaration (2x)
		57545: 148, // parameter_list (2x)
		57546: 149, // parameter_type_list (2x)
		57555: 150, // slice_literal_expression_list (2x)
		57558: 151, // struct_declaration (2x)
		57559: 152, // struct_fields (2x)
		57564: 153, // types_list (2x)
		57493: 154, // $@1 (1x)
		57494: 155, // $@2 (1x)
		57497: 156, // after_period (1x)
		57499: 157, // argument_expression_list (1x)
		57503: 158, // assignment_operator (1x)
		57521: 159, // fields (1x)
		57526: 160, // id_list (1x)
		57532: 161, // infer_action_arg (1x)
		57533: 162, // infer_actions (1x)
		57534: 163, // infer_clauses (1x)
		57550: 164, // return_expression (1x)
		57376: 165, // STRUCT (1x)
		57562: 166, // translation_unit (1x)
		57495: 167, // $default (0x)
		57492: 168, // ADDR (0x)
		57406: 169, // AFFVAR (0x)
		57397: 170, // AND (0x)
		57470: 171, // BASICTYPE (0x)
		57425: 172, // BITANDEQ (0x)
		57427: 173, // BITOREQ (0x)
		57426: 174, // BITXOREQ (0x)
		57488: 175, // CAFF (0x)
		57478: 176, // CLAUSES (0x)
		57369: 177, // COMMENT (0x)
		57463: 178, // CONST (0x)
		57475: 179, // DEF (0x)
		57420: 180, // DIVEQ (0x)
		57484: 181, // DSTACK (0x)
		57486: 182, // DSTATE (0x)
		57462: 183, // ENUM (0x)
		57388: 184, // EQUAL (0x)
		57391: 185, // EQUALWORD (0x)
		57345: 186, // error (0x)
		57412: 187, // EXP (0x)
		57422: 188, // EXPEQ (0x)
		57476: 189, // EXPR (0x)
		57477: 190, // FIELD (0x)
		57433: 191, // GE_OP (0x)
		57394: 192, // GTHANEQ (0x)
		57392: 193, // GTHANWORD (0x)
		57530: 194, // indexing_slice_literal (0x)
		57434: 195, // LE_OP (0x)
		57410: 196, // LEFTSHIFT (0x)
		57423: 197, // LEFTSHIFTEQ (0x)
		57395: 198, // LTHANEQ (0x)
		57393: 199, // LTHANWORD (0x)
		57418: 200, // MINUSEQ (0x)
		57408: 201, // MINUSMINUS (0x)
		57419: 202, // MULTEQ (0x)
		57390: 203, // NEW (0x)
		57378: 204, // NEWLINE (0x)
		57413: 205, // NOT (0x)
		57479: 206, // OBJECT (0x)
		57480: 207, // OBJECTS (0x)
		57358: 208, // OP (0x)
		57398: 209, // OR (0x)
		57417: 210, // PLUSEQ (0x)
		57407: 211, // PLUSPLUS (0x)
		57482: 212, // PSTEP (0x)
		57430: 213, // PTR_OP (0x)
		57474: 214, // REM (0x)
		57409: 215, // REMAINDER (0x)
		57421: 216, // REMAINDEREQ (0x)
		57411: 217, // RIGHTSHIFT (0x)
		57424: 218, // RIGHTSHIFTEQ (0x)
		57489: 219, // TAG (0x)
		57375: 220, // TYPSTRUCT (0x)
		57396: 221, // UNEQUAL (0x)
		57461: 222, // UNION (0x)
		57491: 223, // VALUE (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"REF_OP",
		"LPAREN",
		"MUL_OP",
		"SUB_OP",
		"ADD_OP",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"LBRACE",
		"IDENTIFIER",
		"COMMA",
		"FUNC",
		"AFF",
		"BOOL",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"RPAREN",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"INFER",
		"LONG_LITERAL",
		"NEG_OP",
		"SHORT_LITERAL",
		"UNSIGNED_BYTE_LITERAL",
		"UNSIGNED_INT_LITERAL",
		"UNSIGNED_LONG_LITERAL",
		"UNSIGNED_SHORT_LITERAL",
		"COLON",
		"RBRACK",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"DPROGRAM",
		"EQ_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"NE_OP",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"BITCLEAR_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"STEP",
		"TSTEP",
		"VAR",
		"type_specifier",
		"ASSIGN",
		"DIV_OP",
		"indexing_literal",
		"MOD_OP",
		"slice_literal_expression",
		"array_literal_expression",
		"IF",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"BREAK",
		"CASE",
		"CONTINUE",
		"DEFAULT",
		"FOR",
		"GOTO",
		"RETURN",
		"SWITCH",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"CASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"PERIOD",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"multiplicative_expression",
		"additive_expression",
		"shift_expression",
		"relational_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"struct_literal_expression",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"assignment_expression",
		"compound_statement",
		"expression",
		"debugging",
		"expression_statement",
		"selector",
		"iteration_statement",
		"jump_statement",
		"labeled_statement",
		"selection_statement",
		"statement",
		"stepping",
		"block_item",
		"declaration",
		"declarator",
		"direct_declarator",
		"ELSE",
		"declaration_specifiers",
		"parameter_declaration",
		"block_item_list",
		"else_statement",
		"elseif",
		"infer_action",
		"int_value",
		"constant_expression",
		"struct_literal_fields",
		"array_literal_expression_list",
		"elseif_list",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"slice_literal_expression_list",
		"struct_declaration",
		"struct_fields",
		"types_list",
		"$@1",
		"$@2",
		"after_period",
		"argument_expression_list",
		"assignment_operator",
		"fields",
		"id_list",
		"infer_action_arg",
		"infer_actions",
		"infer_clauses",
		"return_expression",
		"STRUCT",
		"translation_unit",
		"$default",
		"ADDR",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CAFF",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"DEF",
		"DIVEQ",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GTHANEQ",
		"GTHANWORD",
		"indexing_slice_literal",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"TAG",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {166, 1},
		2:   {166, 2},
		3:   {140, 1},
		4:   {140, 1},
		5:   {140, 1},
		6:   {140, 1},
		7:   {140, 1},
		8:   {140, 1},
		9:   {140, 1},
		10:  {140, 1},
		11:  {115, 1},
		12:  {123, 3},
		13:  {123, 2},
		14:  {117, 3},
		15:  {154, 0},
		16:  {117, 4},
		17:  {117, 3},
		18:  {155, 0},
		19:  {117, 4},
		20:  {144, 4},
		21:  {144, 6},
		22:  {151, 4},
		23:  {152, 3},
		24:  {152, 4},
		25:  {159, 2},
		26:  {159, 3},
		27:  {147, 3},
		28:  {145, 3},
		29:  {142, 2},
		30:  {142, 5},
		31:  {143, 2},
		32:  {143, 3},
		33:  {141, 3},
		34:  {141, 4},
		35:  {149, 1},
		36:  {148, 1},
		37:  {148, 3},
		38:  {130, 2},
		39:  {126, 1},
		40:  {127, 1},
		41:  {127, 3},
		42:  {160, 1},
		43:  {160, 1},
		44:  {160, 3},
		45:  {160, 3},
		46:  {153, 3},
		47:  {153, 2},
		48:  {129, 3},
		49:  {129, 2},
		50:  {129, 3},
		51:  {129, 1},
		52:  {129, 1},
		53:  {129, 2},
		54:  {129, 2},
		55:  {129, 3},
		56:  {129, 3},
		57:  {65, 1},
		58:  {65, 1},
		59:  {65, 1},
		60:  {65, 1},
		61:  {65, 1},
		62:  {65, 1},
		63:  {65, 1},
		64:  {65, 1},
		65:  {65, 1},
		66:  {65, 1},
		67:  {65, 1},
		68:  {65, 1},
		69:  {65, 1},
		70:  {137, 0},
		71:  {137, 3},
		72:  {137, 5},
		73:  {138, 1},
		74:  {138, 3},
		75:  {68, 3},
		76:  {68, 4},
		77:  {194, 2},
		78:  {194, 3},
		79:  {71, 5},
		80:  {71, 4},
		81:  {71, 5},
		82:  {71, 4},
		83:  {150, 1},
		84:  {150, 3},
		85:  {70, 6},
		86:  {70, 5},
		87:  {70, 6},
		88:  {70, 5},
		89:  {70, 3},
		90:  {161, 1},
		91:  {161, 1},
		92:  {161, 3},
		93:  {134, 6},
		94:  {134, 4},
		95:  {134, 4},
		96:  {134, 6},
		97:  {162, 2},
		98:  {162, 3},
		99:  {163, 0},
		100: {163, 1},
		101: {135, 1},
		102: {135, 2},
		103: {74, 1},
		104: {74, 3},
		105: {74, 4},
		106: {74, 1},
		107: {74, 1},
		108: {74, 1},
		109: {74, 1},
		110: {74, 1},
		111: {74, 1},
		112: {74, 1},
		113: {74, 1},
		114: {74, 1},
		115: {74, 1},
		116: {74, 1},
		117: {74, 1},
		118: {74, 3},
		119: {74, 1},
		120: {74, 1},
		121: {156, 1},
		122: {156, 1},
		123: {73, 1},
		124: {73, 4},
		125: {73, 3},
		126: {73, 3},
		127: {73, 4},
		128: {73, 2},
		129: {73, 2},
		130: {73, 3},
		131: {157, 1},
		132: {157, 3},
		133: {75, 1},
		134: {75, 2},
		135: {75, 2},
		136: {75, 2},
		137: {76, 1},
		138: {76, 1},
		139: {76, 1},
		140: {76, 1},
		141: {76, 1},
		142: {97, 1},
		143: {97, 3},
		144: {97, 3},
		145: {97, 3},
		146: {98, 1},
		147: {98, 3},
		148: {98, 3},
		149: {99, 1},
		150: {99, 3},
		151: {99, 3},
		152: {99, 3},
		153: {100, 1},
		154: {100, 3},
		155: {100, 3},
		156: {100, 3},
		157: {100, 3},
		158: {100, 3},
		159: {100, 3},
		160: {101, 1},
		161: {101, 3},
		162: {102, 1},
		163: {102, 3},
		164: {103, 1},
		165: {103, 3},
		166: {104, 1},
		167: {104, 3},
		168: {106, 1},
		169: {106, 3},
		170: {105, 1},
		171: {105, 5},
		172: {107, 1},
		173: {107, 4},
		174: {107, 5},
		175: {107, 6},
		176: {112, 1},
		177: {112, 3},
		178: {158, 1},
		179: {158, 1},
		180: {158, 1},
		181: {158, 1},
		182: {158, 1},
		183: {158, 1},
		184: {158, 1},
		185: {158, 1},
		186: {158, 1},
		187: {158, 1},
		188: {158, 1},
		189: {158, 1},
		190: {114, 1},
		191: {114, 3},
		192: {136, 1},
		193: {125, 4},
		194: {125, 6},
		195: {146, 1},
		196: {122, 1},
		197: {122, 1},
		198: {122, 1},
		199: {122, 1},
		200: {122, 1},
		201: {122, 1},
		202: {122, 1},
		203: {122, 1},
		204: {120, 3},
		205: {120, 4},
		206: {120, 3},
		207: {113, 3},
		208: {113, 4},
		209: {131, 1},
		210: {131, 2},
		211: {124, 1},
		212: {124, 1},
		213: {124, 1},
		214: {116, 1},
		215: {116, 2},
		216: {121, 8},
		217: {121, 7},
		218: {121, 6},
		219: {121, 7},
		220: {121, 6},
		221: {121, 7},
		222: {121, 3},
		223: {121, 5},
		224: {133, 6},
		225: {133, 5},
		226: {139, 1},
		227: {139, 2},
		228: {132, 4},
		229: {132, 3},
		230: {118, 3},
		231: {118, 4},
		232: {118, 5},
		233: {164, 1},
		234: {164, 3},
		235: {119, 3},
		236: {119, 2},
		237: {119, 2},
		238: {119, 2},
		239: {119, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [434][]uint16{
		// 0
		{13: 261, 49: 251, 56: 255, 254, 256, 62: 253, 252, 257, 108: 260, 259, 258, 115: 250, 117: 249, 123: 248, 140: 242, 245, 262, 144: 244, 246, 147: 243, 151: 247, 166: 241},
		{13: 261, 49: 251, 56: 255, 254, 256, 62: 253, 252, 257, 108: 260, 259, 258, 240, 115: 250, 117: 249, 123: 248, 140: 673, 245, 262, 144: 244, 246, 147: 243, 151: 247},
		{13: 239, 49: 239, 56: 239, 239, 239, 62: 239, 239, 239, 108: 239, 239, 239, 239},
		{13: 237, 49: 237, 56: 237, 237, 237, 62: 237, 237, 237, 108: 237, 237, 237, 237},
		{13: 236, 49: 236, 56: 236, 236, 236, 62: 236, 236, 236, 108: 236, 236, 236, 236},
		// 5
		{13: 235, 49: 235, 56: 235, 235, 235, 62: 235, 235, 235, 108: 235, 235, 235, 235},
		{13: 234, 49: 234, 56: 234, 234, 234, 62: 234, 234, 234, 108: 234, 234, 234, 234},
		{13: 233, 49: 233, 56: 233, 233, 233, 62: 233, 233, 233, 108: 233, 233, 233, 233},
		{13: 232, 49: 232, 56: 232, 232, 232, 62: 232, 232, 232, 108: 232, 232, 232, 232},
		{13: 231, 49: 231, 56: 231, 231, 231, 62: 231, 231, 231, 108: 231, 231, 231, 231},
		// 10
		{13: 230, 49: 230, 56: 230, 230, 230, 62: 230, 230, 230, 108: 230, 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 13: 229, 229, 229, 229, 229, 229, 229, 229, 229, 23: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 49: 229, 56: 229, 229, 229, 62: 229, 229, 229, 72: 229, 77: 229, 229, 229, 229, 229, 229, 229, 229, 108: 229, 229, 229, 229},
		{4: 578, 28: 577, 135: 671},
		{4: 578, 28: 577, 135: 670},
		{11: 668},
		// 15
		{11: 665},
		{11: 661},
		{2: 448, 11: 447, 126: 655, 446},
		{11: 642},
		{11: 640},
		// 20
		{29: 638},
		{2: 634, 11: 633},
		{2: 263, 143: 264},
		{2: 448, 11: 447, 22: 624, 126: 628, 446, 130: 627, 148: 626, 625},
		{2: 263, 10: 267, 113: 265, 143: 266},
		// 25
		{13: 207, 49: 207, 56: 207, 207, 207, 62: 207, 207, 207, 108: 207, 207, 207, 207},
		{10: 267, 113: 623},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 337, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 339, 340, 131: 338},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 12: 183, 22: 183, 42: 183, 183, 183, 183, 183, 183, 183, 50: 183, 183, 183, 183, 183, 183, 59: 183, 183, 183, 66: 183, 183, 69: 183, 85: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 12: 182, 22: 182, 42: 182, 182, 182, 182, 182, 182, 182, 50: 182, 182, 182, 182, 182, 182, 59: 182, 182, 182, 66: 182, 182, 69: 182, 85: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		// 30
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 12: 181, 22: 181, 42: 181, 181, 181, 181, 181, 181, 181, 50: 181, 181, 181, 181, 181, 181, 59: 181, 181, 181, 66: 181, 181, 69: 181, 85: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 12: 180, 22: 180, 42: 180, 180, 180, 180, 180, 180, 180, 50: 180, 180, 180, 180, 180, 180, 59: 180, 180, 180, 66: 180, 180, 69: 180, 85: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 12: 179, 22: 179, 42: 179, 179, 179, 179, 179, 179, 179, 50: 179, 179, 179, 179, 179, 179, 59: 179, 179, 179, 66: 179, 179, 69: 179, 85: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 12: 178, 22: 178, 42: 178, 178, 178, 178, 178, 178, 178, 50: 178, 178, 178, 178, 178, 178, 59: 178, 178, 178, 66: 178, 178, 69: 178, 85: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 12: 177, 22: 177, 42: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 177, 177, 177, 177, 59: 177, 177, 177, 66: 177, 177, 69: 177, 85: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		// 35
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 12: 176, 22: 176, 42: 176, 176, 176, 176, 176, 176, 176, 50: 176, 176, 176, 176, 176, 176, 59: 176, 176, 176, 66: 176, 176, 69: 176, 85: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 12: 175, 22: 175, 42: 175, 175, 175, 175, 175, 175, 175, 50: 175, 175, 175, 175, 175, 175, 59: 175, 175, 175, 66: 175, 175, 69: 175, 85: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 12: 174, 22: 174, 42: 174, 174, 174, 174, 174, 174, 174, 50: 174, 174, 174, 174, 174, 174, 59: 174, 174, 174, 66: 174, 174, 69: 174, 85: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 12: 173, 22: 173, 42: 173, 173, 173, 173, 173, 173, 173, 50: 173, 173, 173, 173, 173, 173, 59: 173, 173, 173, 66: 173, 173, 69: 173, 85: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 12: 172, 22: 172, 42: 172, 172, 172, 172, 172, 172, 172, 50: 172, 172, 172, 172, 172, 172, 59: 172, 172, 172, 66: 172, 172, 69: 172, 85: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		// 40
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 12: 171, 22: 171, 42: 171, 171, 171, 171, 171, 171, 171, 50: 171, 171, 171, 171, 171, 171, 59: 171, 171, 171, 66: 171, 171, 69: 171, 85: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{28: 472, 43: 607},
		{6: 464, 11: 594, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 595},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 10: 359, 12: 137, 42: 592, 44: 137, 137, 137, 137, 137, 50: 137, 137, 137, 137, 137, 137, 59: 137, 137, 137, 66: 137, 137, 69: 137, 85: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{2: 590},
		// 45
		{10: 562},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 12: 134, 22: 134, 42: 134, 134, 134, 134, 134, 134, 134, 50: 134, 134, 134, 134, 134, 134, 59: 134, 134, 134, 66: 134, 134, 69: 134, 85: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 22: 133, 42: 133, 133, 133, 133, 133, 133, 133, 50: 133, 133, 133, 133, 133, 133, 59: 133, 133, 133, 66: 133, 133, 69: 133, 85: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 22: 132, 42: 132, 132, 132, 132, 132, 132, 132, 50: 132, 132, 132, 132, 132, 132, 59: 132, 132, 132, 66: 132, 132, 69: 132, 85: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 12: 131, 22: 131, 42: 131, 131, 131, 131, 131, 131, 131, 50: 131, 131, 131, 131, 131, 131, 59: 131, 131, 131, 66: 131, 131, 69: 131, 85: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		// 50
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 22: 130, 42: 130, 130, 130, 130, 130, 130, 130, 50: 130, 130, 130, 130, 130, 130, 59: 130, 130, 130, 66: 130, 130, 69: 130, 85: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 12: 129, 22: 129, 42: 129, 129, 129, 129, 129, 129, 129, 50: 129, 129, 129, 129, 129, 129, 59: 129, 129, 129, 66: 129, 129, 69: 129, 85: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 22: 128, 42: 128, 128, 128, 128, 128, 128, 128, 50: 128, 128, 128, 128, 128, 128, 59: 128, 128, 128, 66: 128, 128, 69: 128, 85: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 22: 127, 42: 127, 127, 127, 127, 127, 127, 127, 50: 127, 127, 127, 127, 127, 127, 59: 127, 127, 127, 66: 127, 127, 69: 127, 85: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 22: 126, 42: 126, 126, 126, 126, 126, 126, 126, 50: 126, 126, 126, 126, 126, 126, 59: 126, 126, 126, 66: 126, 126, 69: 126, 85: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		// 55
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 22: 125, 42: 125, 125, 125, 125, 125, 125, 125, 50: 125, 125, 125, 125, 125, 125, 59: 125, 125, 125, 66: 125, 125, 69: 125, 85: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 22: 124, 42: 124, 124, 124, 124, 124, 124, 124, 50: 124, 124, 124, 124, 124, 124, 59: 124, 124, 124, 66: 124, 124, 69: 124, 85: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 22: 123, 42: 123, 123, 123, 123, 123, 123, 123, 50: 123, 123, 123, 123, 123, 123, 59: 123, 123, 123, 66: 123, 123, 69: 123, 85: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 560},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 22: 121, 42: 121, 121, 121, 121, 121, 121, 121, 50: 121, 121, 121, 121, 121, 121, 59: 121, 121, 121, 66: 121, 121, 69: 121, 85: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 60
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 22: 120, 42: 120, 120, 120, 120, 120, 120, 120, 50: 120, 120, 120, 120, 120, 120, 59: 120, 120, 120, 66: 120, 120, 69: 120, 85: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 22: 117, 42: 117, 117, 117, 117, 117, 117, 117, 50: 117, 117, 117, 117, 117, 117, 59: 117, 117, 117, 66: 117, 117, 69: 117, 85: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{107, 107, 373, 107, 107, 107, 372, 375, 374, 107, 107, 12: 107, 22: 107, 42: 107, 107, 107, 107, 107, 107, 107, 50: 107, 107, 107, 107, 107, 107, 59: 107, 107, 107, 66: 107, 107, 69: 107, 85: 107, 107, 107, 107, 107, 107, 107, 107, 555, 107, 107, 107},
		{93: 551},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 550, 369},
		// 65
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 549, 369},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 545, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 371, 369},
		{1: 103, 103, 103, 103, 103, 103, 103, 103, 11: 103, 13: 103, 103, 103, 103, 103, 103, 103, 103, 103, 23: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{1: 102, 102, 102, 102, 102, 102, 102, 102, 11: 102, 13: 102, 102, 102, 102, 102, 102, 102, 102, 102, 23: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{1: 101, 101, 101, 101, 101, 101, 101, 101, 11: 101, 13: 101, 101, 101, 101, 101, 101, 101, 101, 101, 23: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		// 70
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 11: 100, 13: 100, 100, 100, 100, 100, 100, 100, 100, 100, 23: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 11: 99, 13: 99, 99, 99, 99, 99, 99, 99, 99, 99, 23: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 3: 98, 98, 98, 9: 98, 98, 12: 98, 22: 98, 42: 98, 98, 98, 98, 98, 98, 98, 50: 98, 98, 98, 98, 98, 98, 59: 98, 98, 98, 66: 532, 98, 69: 98, 85: 537, 541, 533, 535, 539, 536, 534, 543, 94: 540, 538, 542, 158: 531},
		{94, 94, 3: 517, 94, 94, 9: 94, 94, 12: 94, 22: 94, 42: 94, 94, 94, 94, 94, 94, 94, 50: 94, 94, 94, 94, 94, 94, 59: 94, 94, 94, 67: 518, 69: 519},
		{91, 91, 4: 515, 514, 9: 91, 91, 12: 91, 22: 91, 42: 91, 91, 91, 91, 91, 91, 91, 50: 91, 91, 91, 91, 91, 91, 59: 91, 91, 91},
		// 75
		{87, 87, 9: 87, 87, 12: 87, 22: 87, 42: 87, 87, 87, 87, 87, 87, 87, 50: 87, 87, 87, 87, 87, 87, 59: 512, 510, 511},
		{80, 80, 9: 80, 80, 12: 80, 22: 80, 42: 80, 80, 80, 80, 80, 80, 80, 50: 503, 506, 508, 505, 507, 504},
		{78, 501, 9: 78, 78, 12: 78, 22: 78, 42: 78, 78, 78, 78, 78, 78, 78},
		{76, 9: 76, 76, 12: 76, 22: 76, 42: 76, 76, 76, 76, 76, 76, 499},
		{74, 9: 74, 74, 12: 74, 22: 74, 42: 74, 74, 74, 74, 74, 497},
		// 80
		{72, 9: 72, 72, 12: 72, 22: 72, 42: 72, 72, 72, 72, 495},
		{70, 9: 70, 70, 12: 70, 22: 70, 42: 70, 70, 490, 489},
		{68, 9: 68, 68, 12: 68, 22: 68, 42: 68, 68},
		{64, 9: 64, 64, 12: 64, 22: 64, 42: 64, 64},
		{50, 10: 50, 12: 50, 22: 50, 42: 50, 50},
		// 85
		{400, 12: 386},
		{2: 448, 11: 447, 126: 449, 446},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 13: 44, 44, 44, 44, 44, 44, 44, 44, 44, 23: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49: 44, 56: 44, 44, 44, 62: 44, 44, 44, 72: 44, 77: 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 43, 43, 43, 43, 43, 43, 43, 43, 23: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 49: 43, 56: 43, 43, 43, 62: 43, 43, 43, 72: 43, 77: 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 42, 42, 42, 42, 42, 42, 42, 42, 23: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 49: 42, 56: 42, 42, 42, 62: 42, 42, 42, 72: 42, 77: 42, 42, 42, 42, 42, 42, 42, 42},
		// 90
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 41, 41, 41, 41, 41, 41, 41, 41, 23: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 49: 41, 56: 41, 41, 41, 62: 41, 41, 41, 72: 41, 77: 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 40, 40, 40, 40, 40, 40, 40, 40, 23: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 49: 40, 56: 40, 40, 40, 62: 40, 40, 40, 72: 40, 77: 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 13: 39, 39, 39, 39, 39, 39, 39, 39, 39, 23: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 49: 39, 56: 39, 39, 39, 62: 39, 39, 39, 72: 39, 77: 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 13: 38, 38, 38, 38, 38, 38, 38, 38, 38, 23: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 49: 38, 56: 38, 38, 38, 62: 38, 38, 38, 72: 38, 77: 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 13: 37, 37, 37, 37, 37, 37, 37, 37, 37, 23: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 49: 37, 56: 37, 37, 37, 62: 37, 37, 37, 72: 37, 77: 37, 37, 37, 37, 37, 37, 37, 37},
		// 95
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 370, 321, 136: 443},
		{42: 441},
		{433},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 440, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 412, 340},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 13: 31, 31, 31, 31, 31, 31, 31, 31, 31, 23: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 49: 31, 56: 31, 31, 31, 62: 31, 31, 31, 72: 31, 77: 31, 31, 31, 31, 31, 31, 31, 31},
		// 100
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 13: 29, 29, 29, 29, 29, 29, 29, 29, 29, 23: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 49: 29, 56: 29, 29, 29, 62: 29, 29, 29, 72: 29, 77: 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 28, 28, 28, 28, 28, 28, 28, 28, 23: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 49: 28, 56: 28, 28, 28, 62: 28, 28, 28, 72: 28, 77: 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 27, 27, 27, 27, 27, 27, 27, 27, 23: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 49: 27, 56: 27, 27, 27, 62: 27, 27, 27, 72: 27, 77: 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 26, 26, 26, 26, 26, 26, 26, 26, 23: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 49: 26, 56: 26, 26, 26, 62: 26, 26, 26, 72: 26, 77: 26, 26, 26, 26, 26, 26, 26, 26},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 406, 321},
		// 105
		{2: 402},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 394, 116: 395},
		{11: 392},
		{391},
		{390},
		// 110
		{355, 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 352, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 353, 164: 354},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 359, 12: 137, 22: 137, 42: 137, 137, 137, 137, 137, 137, 137, 50: 137, 137, 137, 137, 137, 137, 59: 137, 137, 137, 66: 137, 137, 69: 137, 85: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{98, 98, 3: 98, 98, 98, 9: 98, 98, 12: 98, 22: 98, 42: 98, 98, 98, 98, 98, 98, 98, 50: 98, 98, 98, 98, 98, 98, 59: 98, 98, 98, 67: 98, 69: 98},
		{7, 12: 7},
		{357, 12: 356},
		// 115
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 2, 2, 2, 2, 2, 2, 2, 2, 23: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 49: 2, 56: 2, 2, 2, 62: 2, 2, 2, 72: 2, 77: 2, 2, 2, 2, 2, 2, 2, 2},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 352, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 358},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 1, 1, 1, 1, 1, 1, 1, 1, 23: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 49: 1, 56: 1, 1, 1, 62: 1, 1, 1, 72: 1, 77: 1, 1, 1, 1, 1, 1, 1, 1},
		{6, 12: 6},
		{9: 170, 11: 360, 170, 137: 361},
		// 120
		{42: 388},
		{9: 363, 12: 362},
		{11: 364},
		{67, 9: 67, 67, 12: 67, 22: 67, 42: 67, 67},
		{42: 365},
		// 125
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 370, 321, 136: 366},
		{9: 168, 12: 168},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 12: 137, 22: 137, 42: 137, 137, 137, 137, 137, 137, 137, 50: 137, 137, 137, 137, 137, 137, 59: 137, 137, 137, 66: 137, 137, 69: 137, 85: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{107, 107, 373, 107, 107, 107, 372, 375, 374, 107, 107, 12: 107, 22: 107, 42: 107, 107, 107, 107, 107, 107, 107, 50: 107, 107, 107, 107, 107, 107, 59: 107, 107, 107, 66: 107, 107, 69: 107, 85: 107, 107, 107, 107, 107, 107, 107, 107, 376, 107, 107, 107},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 371, 369},
		// 130
		{9: 48, 12: 48, 42: 48},
		{104, 104, 3: 104, 104, 104, 9: 104, 104, 12: 104, 22: 104, 42: 104, 104, 104, 104, 104, 104, 104, 50: 104, 104, 104, 104, 104, 104, 59: 104, 104, 104, 66: 104, 104, 69: 104, 85: 104, 104, 104, 104, 104, 104, 104, 104, 94: 104, 104, 104},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 384},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 378, 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 380, 157: 379},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 22: 112, 42: 112, 112, 112, 112, 112, 112, 112, 50: 112, 112, 112, 112, 112, 112, 59: 112, 112, 112, 66: 112, 112, 69: 112, 85: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		// 135
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 22: 111, 42: 111, 111, 111, 111, 111, 111, 111, 50: 111, 111, 111, 111, 111, 111, 59: 111, 111, 111, 66: 111, 111, 69: 111, 85: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{11: 377},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 22: 110, 42: 110, 110, 110, 110, 110, 110, 110, 50: 110, 110, 110, 110, 110, 110, 59: 110, 110, 110, 66: 110, 110, 69: 110, 85: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 22: 114, 42: 114, 114, 114, 114, 114, 114, 114, 50: 114, 114, 114, 114, 114, 114, 59: 114, 114, 114, 66: 114, 114, 69: 114, 85: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{12: 382, 22: 381},
		// 140
		{12: 109, 22: 109},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 22: 113, 42: 113, 113, 113, 113, 113, 113, 113, 50: 113, 113, 113, 113, 113, 113, 59: 113, 113, 113, 66: 113, 113, 69: 113, 85: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 383},
		{12: 108, 22: 108},
		{12: 386, 43: 385},
		// 145
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 22: 116, 42: 116, 116, 116, 116, 116, 116, 116, 50: 116, 116, 116, 116, 116, 116, 59: 116, 116, 116, 66: 116, 116, 69: 116, 85: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 387},
		{49, 10: 49, 12: 49, 22: 49, 42: 49, 49},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 370, 321, 136: 389},
		{9: 169, 12: 169},
		// 150
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 3, 3, 3, 3, 3, 3, 3, 3, 23: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49: 3, 56: 3, 3, 3, 62: 3, 3, 3, 72: 3, 77: 3, 3, 3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 4, 4, 4, 4, 4, 23: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 49: 4, 56: 4, 4, 4, 62: 4, 4, 4, 72: 4, 77: 4, 4, 4, 4, 4, 4, 4, 4},
		{393},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 5, 5, 5, 5, 5, 5, 5, 23: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 49: 5, 56: 5, 5, 5, 62: 5, 5, 5, 72: 5, 77: 5, 5, 5, 5, 5, 5, 5, 5},
		{400, 10: 267, 12: 386, 113: 401},
		// 155
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 325, 116: 396},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 10: 267, 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 398, 397},
		{10: 267, 12: 386, 113: 399},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 9, 9, 9, 9, 9, 9, 9, 9, 23: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 49: 9, 56: 9, 9, 9, 62: 9, 9, 9, 72: 9, 77: 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 13: 8, 8, 8, 8, 8, 8, 8, 8, 8, 23: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 49: 8, 56: 8, 8, 8, 62: 8, 8, 8, 72: 8, 77: 8, 8, 8, 8, 8, 8, 8, 8},
		// 160
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 25, 25, 25, 25, 25, 25, 25, 25, 23: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 49: 25, 56: 25, 25, 25, 62: 25, 25, 25, 72: 25, 77: 25, 25, 25, 25, 25, 25, 25, 25},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13: 10, 10, 10, 10, 10, 10, 10, 10, 10, 23: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 49: 10, 56: 10, 10, 10, 62: 10, 10, 10, 72: 10, 77: 10, 10, 10, 10, 10, 10, 10, 10},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 403},
		{12: 386, 22: 404},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 10: 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 65: 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 405},
		// 165
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 17, 17, 17, 17, 17, 17, 17, 17, 23: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49: 17, 56: 17, 17, 17, 62: 17, 17, 17, 72: 17, 77: 17, 17, 17, 17, 17, 17, 17, 17},
		{10: 407, 113: 408},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 409, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 339, 340, 131: 410},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 18, 18, 18, 18, 18, 18, 18, 18, 23: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 49: 18, 56: 18, 18, 18, 62: 18, 18, 18, 72: 18, 77: 18, 18, 18, 18, 18, 18, 18, 18},
		{433, 128: 416, 132: 434, 417, 139: 435},
		// 170
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 411, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 412, 340},
		{413, 128: 416, 132: 415, 417, 139: 414},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13: 30, 30, 30, 30, 30, 30, 30, 30, 30, 23: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 49: 30, 56: 30, 30, 30, 62: 30, 30, 30, 72: 30, 77: 30, 30, 30, 30, 30, 30, 30, 30},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13: 32, 32, 32, 32, 32, 32, 32, 32, 32, 23: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49: 32, 56: 32, 32, 32, 62: 32, 32, 32, 72: 32, 77: 32, 32, 32, 32, 32, 32, 32, 32, 108: 32, 32, 32, 32},
		{430, 128: 416, 132: 429, 431},
		// 175
		{428},
		{10: 419, 72: 418},
		{14, 128: 14},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 423, 321},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 421, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 339, 340, 131: 420},
		// 180
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 422, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 412, 340},
		{11},
		{12},
		{10: 424},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 426, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 339, 340, 131: 425},
		// 185
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 427, 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 412, 340},
		{15, 128: 15},
		{16, 128: 16},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 13: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 49: 23, 56: 23, 23, 23, 62: 23, 23, 23, 72: 23, 77: 23, 23, 23, 23, 23, 23, 23, 23},
		{432},
		// 190
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 21, 21, 21, 21, 21, 21, 21, 21, 23: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 49: 21, 56: 21, 21, 21, 62: 21, 21, 21, 72: 21, 77: 21, 21, 21, 21, 21, 21, 21, 21},
		{13, 128: 13},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13: 24, 24, 24, 24, 24, 24, 24, 24, 24, 23: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 49: 24, 56: 24, 24, 24, 62: 24, 24, 24, 72: 24, 77: 24, 24, 24, 24, 24, 24, 24, 24},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 13: 33, 33, 33, 33, 33, 33, 33, 33, 33, 23: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 49: 33, 56: 33, 33, 33, 62: 33, 33, 33, 72: 33, 77: 33, 33, 33, 33, 33, 33, 33, 33, 108: 33, 33, 33, 33},
		{439},
		// 195
		{436, 128: 416, 132: 437, 431},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 20, 20, 20, 20, 20, 20, 20, 23: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49: 20, 56: 20, 20, 20, 62: 20, 20, 20, 72: 20, 77: 20, 20, 20, 20, 20, 20, 20, 20},
		{438},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 19, 19, 19, 19, 19, 19, 19, 19, 23: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 49: 19, 56: 19, 19, 19, 62: 19, 19, 19, 72: 19, 77: 19, 19, 19, 19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 13: 22, 22, 22, 22, 22, 22, 22, 22, 22, 23: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 49: 22, 56: 22, 22, 22, 62: 22, 22, 22, 72: 22, 77: 22, 22, 22, 22, 22, 22, 22, 22},
		// 200
		{413},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 10: 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 65: 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 442},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 13: 34, 34, 34, 34, 34, 34, 34, 34, 34, 23: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 49: 34, 56: 34, 34, 34, 62: 34, 34, 34, 72: 34, 77: 34, 34, 34, 34, 34, 34, 34, 34},
		{42: 444},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 10: 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 65: 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 445},
		// 205
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13: 35, 35, 35, 35, 35, 35, 35, 35, 35, 23: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 49: 35, 56: 35, 35, 35, 62: 35, 35, 35, 72: 35, 77: 35, 35, 35, 35, 35, 35, 35, 35},
		{3: 201, 6: 201, 11: 201, 13: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{3: 200, 6: 200, 11: 200, 13: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{2: 448, 11: 447, 126: 487, 446},
		{3: 451, 6: 452, 11: 454, 13: 450, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 453, 68: 455, 129: 456},
		// 210
		{2: 476, 153: 477},
		{3: 451, 6: 452, 11: 454, 13: 450, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 453, 68: 455, 129: 475},
		{28: 472, 43: 471},
		{189, 12: 189, 22: 189, 66: 189, 93: 469},
		{188, 12: 188, 22: 188, 66: 188, 93: 467},
		// 215
		{6: 464, 11: 463, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 462},
		{457, 66: 458},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13: 47, 47, 47, 47, 47, 47, 47, 47, 47, 23: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49: 47, 56: 47, 47, 47, 62: 47, 47, 47, 72: 47, 77: 47, 47, 47, 47, 47, 47, 47, 47},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 460, 146: 459},
		{461},
		// 220
		{45},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 13: 46, 46, 46, 46, 46, 46, 46, 46, 46, 23: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 49: 46, 56: 46, 46, 46, 62: 46, 46, 46, 72: 46, 77: 46, 46, 46, 46, 46, 46, 46, 46},
		{187, 12: 187, 22: 187, 66: 187},
		{186, 12: 186, 22: 186, 66: 186},
		{28: 465},
		// 225
		{43: 466},
		{6: 164, 11: 164, 14: 164, 164, 164, 164, 164, 164, 164, 164, 23: 164, 164, 164, 164, 164},
		{11: 468},
		{185, 12: 185, 22: 185, 66: 185},
		{11: 470},
		// 230
		{184, 12: 184, 22: 184, 66: 184},
		{3: 451, 6: 452, 11: 454, 13: 450, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 453, 68: 455, 129: 474},
		{43: 473},
		{6: 165, 11: 165, 14: 165, 165, 165, 165, 165, 165, 165, 165, 23: 165, 165, 165, 165, 165},
		{190, 12: 190, 22: 190, 66: 190},
		// 235
		{191, 12: 191, 22: 191, 66: 191},
		{11: 479, 14: 268, 269, 271, 272, 274, 275, 276, 273, 482, 270, 278, 279, 280, 277, 65: 480, 160: 481},
		{2: 476, 153: 478},
		{192, 12: 192, 22: 192, 66: 192},
		{12: 198, 22: 198},
		// 240
		{12: 197, 22: 197},
		{12: 483, 22: 484},
		{193, 2: 193, 12: 193, 22: 193, 66: 193},
		{11: 485, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 486},
		{194, 2: 194, 12: 194, 22: 194, 66: 194},
		// 245
		{12: 196, 22: 196},
		{12: 195, 22: 195},
		{22: 488},
		{3: 199, 6: 199, 11: 199, 13: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 494},
		// 250
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 114: 491},
		{12: 386, 42: 492},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 319, 320, 493, 321},
		{69, 9: 69, 69, 12: 69, 22: 69, 42: 69, 69},
		{71, 9: 71, 71, 12: 71, 22: 71, 42: 71, 71, 71, 71, 495},
		// 255
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 318, 496},
		{73, 9: 73, 73, 12: 73, 22: 73, 42: 73, 73, 73, 73, 73, 497},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 317, 498},
		{75, 9: 75, 75, 12: 75, 22: 75, 42: 75, 75, 75, 75, 75, 75, 499},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 316, 500},
		// 260
		{77, 501, 9: 77, 77, 12: 77, 22: 77, 42: 77, 77, 77, 77, 77, 77, 77},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 315, 502},
		{79, 79, 9: 79, 79, 12: 79, 22: 79, 42: 79, 79, 79, 79, 79, 79, 79, 50: 503, 506, 508, 505, 507, 504},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 530},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 529},
		// 265
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 528},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 527},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 526},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 314, 509},
		{81, 81, 9: 81, 81, 12: 81, 22: 81, 42: 81, 81, 81, 81, 81, 81, 81, 50: 81, 81, 81, 81, 81, 81, 59: 512, 510, 511},
		// 270
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 525},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 524},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 313, 513},
		{88, 88, 4: 515, 514, 9: 88, 88, 12: 88, 22: 88, 42: 88, 88, 88, 88, 88, 88, 88, 50: 88, 88, 88, 88, 88, 88, 59: 88, 88, 88},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 523},
		// 275
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 352, 369, 97: 516},
		{92, 92, 3: 517, 92, 92, 9: 92, 92, 12: 92, 22: 92, 42: 92, 92, 92, 92, 92, 92, 92, 50: 92, 92, 92, 92, 92, 92, 59: 92, 92, 92, 67: 518, 69: 519},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 522, 369},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 521, 369},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 367, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 368, 301, 520, 369},
		// 280
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 22: 95, 42: 95, 95, 95, 95, 95, 95, 95, 50: 95, 95, 95, 95, 95, 95, 59: 95, 95, 95, 67: 95, 69: 95},
		{96, 96, 3: 96, 96, 96, 9: 96, 96, 12: 96, 22: 96, 42: 96, 96, 96, 96, 96, 96, 96, 50: 96, 96, 96, 96, 96, 96, 59: 96, 96, 96, 67: 96, 69: 96},
		{97, 97, 3: 97, 97, 97, 9: 97, 97, 12: 97, 22: 97, 42: 97, 97, 97, 97, 97, 97, 97, 50: 97, 97, 97, 97, 97, 97, 59: 97, 97, 97, 67: 97, 69: 97},
		{93, 93, 3: 517, 93, 93, 9: 93, 93, 12: 93, 22: 93, 42: 93, 93, 93, 93, 93, 93, 93, 50: 93, 93, 93, 93, 93, 93, 59: 93, 93, 93, 67: 518, 69: 519},
		{89, 89, 4: 515, 514, 9: 89, 89, 12: 89, 22: 89, 42: 89, 89, 89, 89, 89, 89, 89, 50: 89, 89, 89, 89, 89, 89, 59: 89, 89, 89},
		// 285
		{90, 90, 4: 515, 514, 9: 90, 90, 12: 90, 22: 90, 42: 90, 90, 90, 90, 90, 90, 90, 50: 90, 90, 90, 90, 90, 90, 59: 90, 90, 90},
		{82, 82, 9: 82, 82, 12: 82, 22: 82, 42: 82, 82, 82, 82, 82, 82, 82, 50: 82, 82, 82, 82, 82, 82, 59: 512, 510, 511},
		{83, 83, 9: 83, 83, 12: 83, 22: 83, 42: 83, 83, 83, 83, 83, 83, 83, 50: 83, 83, 83, 83, 83, 83, 59: 512, 510, 511},
		{84, 84, 9: 84, 84, 12: 84, 22: 84, 42: 84, 84, 84, 84, 84, 84, 84, 50: 84, 84, 84, 84, 84, 84, 59: 512, 510, 511},
		{85, 85, 9: 85, 85, 12: 85, 22: 85, 42: 85, 85, 85, 85, 85, 85, 85, 50: 85, 85, 85, 85, 85, 85, 59: 512, 510, 511},
		// 290
		{86, 86, 9: 86, 86, 12: 86, 22: 86, 42: 86, 86, 86, 86, 86, 86, 86, 50: 86, 86, 86, 86, 86, 86, 59: 512, 510, 511},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 544},
		{1: 62, 62, 62, 62, 62, 62, 62, 62, 11: 62, 13: 62, 62, 62, 62, 62, 62, 62, 62, 62, 23: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{1: 61, 61, 61, 61, 61, 61, 61, 61, 11: 61, 13: 61, 61, 61, 61, 61, 61, 61, 61, 61, 23: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{1: 60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 13: 60, 60, 60, 60, 60, 60, 60, 60, 60, 23: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		// 295
		{1: 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 13: 59, 59, 59, 59, 59, 59, 59, 59, 59, 23: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{1: 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 13: 58, 58, 58, 58, 58, 58, 58, 58, 58, 23: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{1: 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 13: 57, 57, 57, 57, 57, 57, 57, 57, 57, 23: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{1: 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 13: 56, 56, 56, 56, 56, 56, 56, 56, 56, 23: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{1: 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 13: 55, 55, 55, 55, 55, 55, 55, 55, 55, 23: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		// 300
		{1: 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 13: 54, 54, 54, 54, 54, 54, 54, 54, 54, 23: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{1: 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 13: 53, 53, 53, 53, 53, 53, 53, 53, 53, 23: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 13: 52, 52, 52, 52, 52, 52, 52, 52, 52, 23: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{1: 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 13: 51, 51, 51, 51, 51, 51, 51, 51, 51, 23: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{63, 9: 63, 63, 12: 63, 22: 63, 42: 63, 63},
		// 305
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 546, 12: 137, 22: 137, 42: 137, 137, 137, 137, 137, 137, 137, 50: 137, 137, 137, 137, 137, 137, 59: 137, 137, 137, 66: 137, 137, 69: 137, 85: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{9: 170, 11: 360, 170, 137: 547},
		{9: 548, 12: 362},
		{66, 9: 66, 66, 12: 66, 22: 66, 42: 66, 66},
		{105, 105, 3: 105, 105, 105, 9: 105, 105, 12: 105, 22: 105, 42: 105, 105, 105, 105, 105, 105, 105, 50: 105, 105, 105, 105, 105, 105, 59: 105, 105, 105, 66: 105, 105, 69: 105, 85: 105, 105, 105, 105, 105, 105, 105, 105, 94: 105, 105, 105},
		// 310
		{106, 106, 3: 106, 106, 106, 9: 106, 106, 12: 106, 22: 106, 42: 106, 106, 106, 106, 106, 106, 106, 50: 106, 106, 106, 106, 106, 106, 59: 106, 106, 106, 66: 106, 106, 69: 106, 85: 106, 106, 106, 106, 106, 106, 106, 106, 94: 106, 106, 106},
		{11: 553, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 552, 156: 554},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 22: 119, 42: 119, 119, 119, 119, 119, 119, 119, 50: 119, 119, 119, 119, 119, 119, 59: 119, 119, 119, 66: 119, 119, 69: 119, 85: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 22: 118, 42: 118, 118, 118, 118, 118, 118, 118, 50: 118, 118, 118, 118, 118, 118, 59: 118, 118, 118, 66: 118, 118, 69: 118, 85: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 22: 115, 42: 115, 115, 115, 115, 115, 115, 115, 50: 115, 115, 115, 115, 115, 115, 59: 115, 115, 115, 66: 115, 115, 69: 115, 85: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		// 315
		{11: 556},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 557, 12: 110, 22: 110, 42: 110, 110, 110, 110, 110, 110, 110, 50: 110, 110, 110, 110, 110, 110, 59: 110, 110, 110, 66: 110, 110, 69: 110, 85: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{9: 170, 11: 360, 170, 137: 558},
		{9: 559, 12: 362},
		{65, 9: 65, 65, 12: 65, 22: 65, 42: 65, 65},
		// 320
		{12: 386, 22: 561},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 22: 122, 42: 122, 122, 122, 122, 122, 122, 122, 50: 122, 122, 122, 122, 122, 122, 59: 122, 122, 122, 66: 122, 122, 69: 122, 85: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{9: 141, 11: 563, 134: 564, 162: 565, 566},
		{2: 571},
		{570},
		// 325
		{9: 140, 11: 563, 134: 568},
		{9: 567},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 22: 135, 42: 135, 135, 135, 135, 135, 135, 135, 50: 135, 135, 135, 135, 135, 135, 59: 135, 135, 135, 66: 135, 135, 69: 135, 85: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{569},
		{9: 142, 11: 142},
		// 330
		{9: 143, 11: 143},
		{4: 578, 11: 572, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 577, 65: 574, 134: 576, 573, 161: 575},
		{2: 571, 12: 150, 22: 150},
		{12: 149, 22: 149},
		{93: 588},
		// 335
		{12: 584, 22: 585},
		{12: 581, 22: 580},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 49: 139, 56: 139, 139, 139, 62: 139, 139, 139, 72: 139, 77: 139, 139, 139, 139, 139, 139, 139, 139, 108: 139, 139, 139, 139},
		{28: 579},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 49: 138, 56: 138, 138, 138, 62: 138, 138, 138, 72: 138, 77: 138, 138, 138, 138, 138, 138, 138, 138, 108: 138, 138, 138, 138},
		// 340
		{145, 12: 145, 22: 145},
		{11: 563, 134: 582},
		{22: 583},
		{144, 12: 144, 22: 144},
		{11: 586},
		// 345
		{146, 12: 146, 22: 146},
		{22: 587},
		{147, 12: 147, 22: 147},
		{11: 589},
		{12: 148, 22: 148},
		// 350
		{22: 591},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 22: 136, 42: 136, 136, 136, 136, 136, 136, 136, 50: 136, 136, 136, 136, 136, 136, 59: 136, 136, 136, 66: 136, 136, 69: 136, 85: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{343, 307, 298, 308, 310, 309, 281, 305, 304, 10: 267, 283, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 49: 251, 56: 255, 254, 256, 62: 253, 252, 326, 303, 68: 282, 70: 300, 299, 344, 302, 301, 312, 306, 349, 335, 348, 336, 346, 347, 350, 345, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 324, 328, 325, 333, 329, 332, 331, 334, 327, 330, 341, 342, 593, 340},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 13: 36, 36, 36, 36, 36, 36, 36, 36, 36, 23: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 49: 36, 56: 36, 36, 36, 62: 36, 36, 36, 72: 36, 77: 36, 36, 36, 36, 36, 36, 36, 36},
		{10: 603},
		// 355
		{10: 596},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 599, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 597, 138: 598},
		{9: 167, 12: 167},
		{9: 601, 12: 600},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 12: 158, 22: 158, 42: 158, 158, 158, 158, 158, 158, 158, 50: 158, 158, 158, 158, 158, 158, 59: 158, 158, 158, 66: 158, 158, 69: 158, 85: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		// 360
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 602},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 12: 159, 22: 159, 42: 159, 159, 159, 159, 159, 159, 159, 50: 159, 159, 159, 159, 159, 159, 59: 159, 159, 159, 66: 159, 159, 69: 159, 85: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{9: 166, 12: 166},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 605, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 597, 138: 604},
		{9: 606, 12: 600},
		// 365
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 12: 160, 22: 160, 42: 160, 160, 160, 160, 160, 160, 160, 50: 160, 160, 160, 160, 160, 160, 59: 160, 160, 160, 66: 160, 160, 69: 160, 85: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 12: 161, 22: 161, 42: 161, 161, 161, 161, 161, 161, 161, 50: 161, 161, 161, 161, 161, 161, 59: 161, 161, 161, 66: 161, 161, 69: 161, 85: 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161},
		{6: 608, 11: 609, 14: 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 610, 70: 611},
		{43: 607},
		{10: 619},
		// 370
		{10: 612},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 12: 151, 22: 151, 42: 151, 151, 151, 151, 151, 151, 151, 50: 151, 151, 151, 151, 151, 151, 59: 151, 151, 151, 66: 151, 151, 69: 151, 85: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 615, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 613, 150: 614},
		{9: 157, 12: 157},
		{9: 617, 12: 616},
		// 375
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 12: 152, 22: 152, 42: 152, 152, 152, 152, 152, 152, 152, 50: 152, 152, 152, 152, 152, 152, 59: 152, 152, 152, 66: 152, 152, 69: 152, 85: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 618},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 12: 153, 22: 153, 42: 153, 153, 153, 153, 153, 153, 153, 50: 153, 153, 153, 153, 153, 153, 59: 153, 153, 153, 66: 153, 153, 69: 153, 85: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{9: 156, 12: 156},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 621, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 613, 150: 620},
		// 380
		{9: 622, 12: 616},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 12: 154, 22: 154, 42: 154, 154, 154, 154, 154, 154, 154, 50: 154, 154, 154, 154, 154, 154, 59: 154, 154, 154, 66: 154, 154, 69: 154, 85: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 12: 155, 22: 155, 42: 155, 155, 155, 155, 155, 155, 155, 50: 155, 155, 155, 155, 155, 155, 59: 155, 155, 155, 66: 155, 155, 69: 155, 85: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155},
		{13: 206, 49: 206, 56: 206, 206, 206, 62: 206, 206, 206, 108: 206, 206, 206, 206},
		{2: 209, 10: 209},
		// 385
		{22: 632},
		{12: 630, 22: 205},
		{12: 204, 22: 204},
		{3: 451, 6: 452, 11: 454, 13: 450, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 453, 68: 455, 129: 629},
		{202, 12: 202, 22: 202},
		// 390
		{2: 448, 11: 447, 126: 628, 446, 130: 631},
		{12: 203, 22: 203},
		{2: 208, 10: 208},
		{2: 211},
		{2: 448, 11: 447, 126: 628, 446, 130: 627, 148: 626, 635},
		// 395
		{22: 636},
		{11: 637},
		{2: 210},
		{639},
		{13: 212, 49: 212, 56: 212, 212, 212, 62: 212, 212, 212, 108: 212, 212, 212, 212},
		// 400
		{641},
		{13: 213, 49: 213, 56: 213, 213, 213, 62: 213, 213, 213, 108: 213, 213, 213, 213},
		{165: 643},
		{10: 645, 152: 644},
		{13: 218, 49: 218, 56: 218, 218, 218, 62: 218, 218, 218, 108: 218, 218, 218, 218},
		// 405
		{2: 448, 9: 646, 11: 447, 126: 628, 446, 130: 648, 159: 647},
		{654},
		{2: 448, 9: 650, 11: 447, 126: 628, 446, 130: 651},
		{649},
		{2: 215, 9: 215, 11: 215},
		// 410
		{653},
		{652},
		{2: 214, 9: 214, 11: 214},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 216, 216, 216, 216, 216, 216, 216, 216, 23: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 49: 216, 56: 216, 216, 216, 62: 216, 216, 216, 72: 216, 77: 216, 216, 216, 216, 216, 216, 216, 216, 108: 216, 216, 216, 216},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 13: 217, 217, 217, 217, 217, 217, 217, 217, 217, 23: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 49: 217, 56: 217, 217, 217, 62: 217, 217, 217, 72: 217, 77: 217, 217, 217, 217, 217, 217, 217, 217, 108: 217, 217, 217, 217},
		// 415
		{3: 451, 6: 452, 11: 454, 13: 450, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 65: 453, 68: 455, 129: 656},
		{657, 66: 658},
		{13: 220, 49: 220, 56: 220, 220, 220, 62: 220, 220, 220, 108: 220, 220, 220, 220},
		{1: 307, 298, 308, 310, 309, 281, 305, 304, 11: 351, 13: 284, 268, 269, 271, 272, 274, 275, 276, 273, 23: 270, 278, 279, 280, 277, 290, 286, 287, 288, 297, 296, 285, 291, 311, 289, 292, 294, 295, 293, 65: 303, 68: 282, 70: 300, 299, 73: 302, 301, 312, 306, 97: 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 112: 460, 146: 659},
		{660},
		// 420
		{13: 219, 49: 219, 56: 219, 219, 219, 62: 219, 219, 219, 108: 219, 219, 219, 219},
		{662, 10: 222, 155: 663},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 13: 223, 223, 223, 223, 223, 223, 223, 223, 223, 23: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 49: 223, 56: 223, 223, 223, 62: 223, 223, 223, 72: 223, 77: 223, 223, 223, 223, 223, 223, 223, 223, 108: 223, 223, 223, 223},
		{10: 645, 152: 664},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 13: 221, 221, 221, 221, 221, 221, 221, 221, 221, 23: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 49: 221, 56: 221, 221, 221, 62: 221, 221, 221, 72: 221, 77: 221, 221, 221, 221, 221, 221, 221, 221, 108: 221, 221, 221, 221},
		// 425
		{10: 225, 154: 666},
		{10: 267, 113: 667},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 13: 224, 224, 224, 224, 224, 224, 224, 224, 224, 23: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 49: 224, 56: 224, 224, 224, 62: 224, 224, 224, 72: 224, 77: 224, 224, 224, 224, 224, 224, 224, 224, 108: 224, 224, 224, 224},
		{669},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 13: 226, 226, 226, 226, 226, 226, 226, 226, 226, 23: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 49: 226, 56: 226, 226, 226, 62: 226, 226, 226, 72: 226, 77: 226, 226, 226, 226, 226, 226, 226, 226, 108: 226, 226, 226, 226},
		// 430
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 13: 227, 227, 227, 227, 227, 227, 227, 227, 227, 23: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 49: 227, 56: 227, 227, 227, 62: 227, 227, 227, 72: 227, 77: 227, 227, 227, 227, 227, 227, 227, 227, 108: 227, 227, 227, 227},
		{4: 578, 28: 577, 135: 672},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 13: 228, 228, 228, 228, 228, 228, 228, 228, 228, 23: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 49: 228, 56: 228, 228, 228, 62: 228, 228, 228, 72: 228, 77: 228, 228, 228, 228, 228, 228, 228, 228, 108: 228, 228, 228, 228},
		{13: 238, 49: 238, 56: 238, 238, 238, 62: 238, 238, 238, 108: 238, 238, 238, 238},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 186

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 11:
		{
			PRGRM.PrintProgram()
		}
	case 12:
		{
			Stepping(int(yyS[yypt-1].i32), int(yyS[yypt-0].i32), true)
		}
	case 13:
		{
			Stepping(int(yyS[yypt-0].i32), 0, false)
		}
	case 14:
		{
			yyVAL.string = Selector(yyS[yypt-1].tok, SELECT_TYP_PKG)
		}
	case 15:
		{
			yyVAL.string = Selector(yyS[yypt-0].tok, SELECT_TYP_FUNC)
		}
	case 16:
		{
			if len(yyS[yypt-0].expressions) > 0 {
				if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
					if fn, err := PRGRM.GetFunction(yyS[yypt-1].string, pkg.Name); err == nil {
						for _, expr := range yyS[yypt-0].expressions {
							fn.AddExpression(expr)
						}
						FunctionDeclaration(fn, nil, nil, nil)
					} else {
						panic(err)
					}
				} else {
					panic(err)
				}
			}

			// if $<bool>4 {

			// 	if _, err := PRGRM.SelectFunction($<string>3); err == nil {
			// 	}
			// }
		}
	case 17:
		{
			yyVAL.string = Selector(yyS[yypt-1].tok, SELECT_TYP_STRCT)
		}
	case 18:
		{
			yyVAL.string = Selector(yyS[yypt-0].tok, SELECT_TYP_STRCT)
		}
	case 19:
		{
			if len(yyS[yypt-0].arguments) > 0 {
				if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
					if strct, err := PRGRM.GetStruct(yyS[yypt-1].string, pkg.Name); err == nil {
						for _, fld := range yyS[yypt-0].arguments {
							strct.AddField(fld)
						}
						// FunctionDeclaration(fn, nil, nil, nil)
					} else {
						panic(err)
					}
				} else {
					panic(err)
				}
			}
			/* if $<bool>4 { */
			/* 	if _, err := PRGRM.SelectStruct($<string>3); err == nil { */
			/* 		//fmt.Println(fmt.Sprintf("== Changed to struct '%s' ==", strct.Name)) */
			/* 	} */
			/* } */
		}
	case 20:
		{
			DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 21:
		{
			DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 22:
		{
			DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 23:
		{
			yyVAL.arguments = nil
		}
	case 24:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 25:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 26:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 27:
		{
			DeclarePackage(yyS[yypt-1].tok)
		}
	case 28:
		{
			// DeclareImport($2)
		}
	case 29:
		{
			yylval.line = 0
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, nil, false)
			InFn = true
		}
	case 30:
		{
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, yyS[yypt-2].arguments, true)
			InFn = true
		}
	case 31:
		{
			yyVAL.arguments = nil
		}
	case 32:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 33:
		{
			FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, yyS[yypt-0].expressions)
			InFn = false
		}
	case 34:
		{
			FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, yyS[yypt-0].expressions)
			InFn = false
		}
	case 36:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 37:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 38:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			yyS[yypt-0].argument.IsLocalDeclaration = true
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 40:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				arg := MakeArgument("", CurrentFile, LineNo)
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 41:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 42:
		{
			arg := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.arguments = []*CXArgument{arg}
		}
	case 43:
		{
			arg := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = []*CXArgument{arg}
		}
	case 44:
		{
			arg := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 45:
		{
			arg := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 46:
		{

			yyVAL.arguments = yyS[yypt-1].arguments

		}
	case 47:
		{
			yyVAL.arguments = nil
		}
	case 48:
		{
			arg := MakeArgument("", CurrentFile, LineNo).AddType("func")
			arg.Inputs = yyS[yypt-1].arguments
			arg.Outputs = yyS[yypt-0].arguments
			yyVAL.argument = DeclarationSpecifiers(arg, []int{0}, DECL_FUNC)
		}
	case 49:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, DECL_POINTER)
		}
	case 50:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, DECL_SLICE)
		}
	case 51:
		{
			yyVAL.argument = DeclarationSpecifiersBasic(yyS[yypt-0].i)
		}
	case 52:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
		}
	case 53:
		{
			basic := DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.argument = DeclarationSpecifiers(basic, yyS[yypt-1].ints, DECL_ARRAY)
		}
	case 54:
		{
			strct := DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFile, LineNo)
			yyVAL.argument = DeclarationSpecifiers(strct, yyS[yypt-1].ints, DECL_ARRAY)
		}
	case 55:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true, CurrentFile, LineNo)
		}
	case 56:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, TypeNames[yyS[yypt-2].i], true, CurrentFile, LineNo)
		}
	case 57:
		{
			yyVAL.i = TYPE_AFF
		}
	case 58:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 59:
		{
			yyVAL.i = TYPE_STR
		}
	case 60:
		{
			yyVAL.i = TYPE_F32
		}
	case 61:
		{
			yyVAL.i = TYPE_F64
		}
	case 62:
		{
			yyVAL.i = TYPE_I8
		}
	case 63:
		{
			yyVAL.i = TYPE_I16
		}
	case 64:
		{
			yyVAL.i = TYPE_I32
		}
	case 65:
		{
			yyVAL.i = TYPE_I64
		}
	case 66:
		{
			yyVAL.i = TYPE_UI8
		}
	case 67:
		{
			yyVAL.i = TYPE_UI16
		}
	case 68:
		{
			yyVAL.i = TYPE_UI32
		}
	case 69:
		{
			yyVAL.i = TYPE_UI64
		}
	case 70:
		{
			yyVAL.expressions = nil
		}
	case 71:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = StructLiteralAssignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)
			} else {
				yyVAL.expressions = Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)
			}
		}
	case 72:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = append(yyS[yypt-4].expressions, StructLiteralAssignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)...)
			} else {
				yyVAL.expressions = append(yyS[yypt-4].expressions, Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)...)
			}
		}
	case 73:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 74:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 75:
		{
			yyVAL.ints = []int{int(yyS[yypt-1].i32)}
		}
	case 76:
		{
			yyVAL.ints = append(yyS[yypt-3].ints, int(yyS[yypt-1].i32))
		}
	case 77:
		{
			yyVAL.ints = []int{0}
		}
	case 78:
		{
			yyVAL.ints = append(yyS[yypt-2].ints, 0)
		}
	case 79:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 80:
		{
			yyVAL.expressions = nil
		}
	case 81:
		{
			yyVAL.expressions = ArrayLiteralExpression(yyS[yypt-4].ints, yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 82:
		{
			yyVAL.expressions = nil
		}
	case 83:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 84:
		{

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 85:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 86:
		{
			yyVAL.expressions = nil
		}
	case 87:
		{
			yyVAL.expressions = SliceLiteralExpression(yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 88:
		{
			yyVAL.expressions = nil
		}
	case 89:
		{
			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].Name {
					expr.Outputs[0].Lengths = append(expr.Outputs[0].Lengths, 0)
					expr.Outputs[0].DeclarationSpecifiers = append(expr.Outputs[0].DeclarationSpecifiers, DECL_SLICE)
				}
			}

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 90:
		{
			yyVAL.string = yyS[yypt-0].tok
		}
	case 91:
		{
			yyVAL.string = strconv.Itoa(int(yyS[yypt-0].i32))
		}
	case 92:
		{
			yyVAL.string = TypeNames[yyS[yypt-2].i] + "." + yyS[yypt-0].tok
		}
	case 93:
		{
			res := append([]string{yyS[yypt-3].string}, yyS[yypt-1].tok)
			res = append(res, yyS[yypt-5].tok)
			yyVAL.stringA = res
		}
	case 94:
		{
			yyVAL.stringA = append([]string{yyS[yypt-3].tok}, yyS[yypt-1].string)
		}
	case 95:
		{
			yyVAL.stringA = append(yyS[yypt-1].stringA, yyS[yypt-3].tok)
		}
	case 96:
		{
			res := append(yyS[yypt-3].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = append(res, yyS[yypt-5].tok)
		}
	case 97:
		{
			yyVAL.stringA = yyS[yypt-1].stringA
		}
	case 98:
		{
			yyS[yypt-2].stringA = append(yyS[yypt-2].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = yyS[yypt-2].stringA
		}
	case 99:
		{
			yyVAL.expressions = SliceLiteralExpression(TYPE_AFF, nil)
		}
	case 100:
		{
			var exprs []*CXExpression
			for _, str := range yyS[yypt-0].stringA {
				expr := WritePrimary(TYPE_AFF, encoder.Serialize(str), false)
				expr[len(expr)-1].IsArrayLiteral = true
				exprs = append(exprs, expr...)
			}

			yyVAL.expressions = SliceLiteralExpression(TYPE_AFF, exprs)
		}
	case 101:
		{
			yyVAL.i32 = yyS[yypt-0].i32
		}
	case 102:
		{
			yyVAL.i32 = -yyS[yypt-0].i32
		}
	case 103:
		{
			yyVAL.expressions = PrimaryIdentifier(yyS[yypt-0].tok)
		}
	case 104:
		{
			yyVAL.expressions = nil
		}
	case 105:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 106:
		{
			yyVAL.expressions = WritePrimary(TYPE_STR, encoder.Serialize(yyS[yypt-0].tok), false)
		}
	case 107:
		{
			exprs := WritePrimary(TYPE_BOOL, encoder.Serialize(yyS[yypt-0].bool), false)
			yyVAL.expressions = exprs
		}
	case 108:
		{
			yyVAL.expressions = WritePrimary(TYPE_I8, encoder.Serialize(yyS[yypt-0].i8), false)
		}
	case 109:
		{
			yyVAL.expressions = WritePrimary(TYPE_I16, encoder.Serialize(yyS[yypt-0].i16), false)
		}
	case 110:
		{
			yyVAL.expressions = WritePrimary(TYPE_I32, encoder.Serialize(yyS[yypt-0].i32), false)
		}
	case 111:
		{
			yyVAL.expressions = WritePrimary(TYPE_I64, encoder.Serialize(yyS[yypt-0].i64), false)
		}
	case 112:
		{
			yyVAL.expressions = WritePrimary(TYPE_UI8, encoder.Serialize(yyS[yypt-0].ui8), false)
		}
	case 113:
		{
			yyVAL.expressions = WritePrimary(TYPE_UI16, encoder.Serialize(yyS[yypt-0].ui16), false)
		}
	case 114:
		{
			yyVAL.expressions = WritePrimary(TYPE_UI32, encoder.Serialize(yyS[yypt-0].ui32), false)
		}
	case 115:
		{
			yyVAL.expressions = WritePrimary(TYPE_UI64, encoder.Serialize(yyS[yypt-0].ui64), false)
		}
	case 116:
		{
			yyVAL.expressions = WritePrimary(TYPE_F32, encoder.Serialize(yyS[yypt-0].f32), false)
		}
	case 117:
		{
			yyVAL.expressions = WritePrimary(TYPE_F64, encoder.Serialize(yyS[yypt-0].f64), false)
		}
	case 118:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 119:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 120:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 121:
		{
			yyVAL.tok = TypeNames[yyS[yypt-0].i]
		}
	case 124:
		{
			yyVAL.expressions = PostfixExpressionArray(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 125:
		{
			yyVAL.expressions = PostfixExpressionNative(int(yyS[yypt-2].i), yyS[yypt-0].tok)
		}
	case 126:
		{
			yyVAL.expressions = PostfixExpressionEmptyFunCall(yyS[yypt-2].expressions)
		}
	case 127:
		{
			yyVAL.expressions = PostfixExpressionFunCall(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 128:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, true)
		}
	case 129:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, false)
		}
	case 130:
		{
			yyVAL.expressions = PostfixExpressionField(yyS[yypt-2].expressions, yyS[yypt-0].tok)
		}
	case 132:
		{
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 134:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 135:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 136:
		{
			yyVAL.expressions = UnaryExpression(yyS[yypt-1].tok, yyS[yypt-0].expressions)
		}
	case 143:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MUL)
		}
	case 144:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_DIV)
		}
	case 145:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MOD)
		}
	case 147:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_ADD)
		}
	case 148:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_SUB)
		}
	case 150:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHL)
		}
	case 151:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHR)
		}
	case 152:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITCLEAR)
		}
	case 154:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_EQUAL)
		}
	case 155:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_UNEQUAL)
		}
	case 156:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LT)
		}
	case 157:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GT)
		}
	case 158:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LTEQ)
		}
	case 159:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GTEQ)
		}
	case 161:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITAND)
		}
	case 163:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITXOR)
		}
	case 165:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITOR)
		}
	case 167:
		{
			yyVAL.expressions = UndefinedTypeOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_AND])
		}
	case 169:
		{
			yyVAL.expressions = UndefinedTypeOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_OR])
		}
	case 173:
		{
			yyVAL.expressions = PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 174:
		{
			yyVAL.expressions = UnaryExpression(yyS[yypt-4].tok, PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions))
		}
	case 175:
		{
			yyVAL.expressions = PrimaryStructLiteralExternal(yyS[yypt-5].expressions[0].Outputs[0].Name, yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 177:
		{
			if yyS[yypt-0].expressions == nil {
				yyVAL.expressions = nil
			}
			if yyS[yypt-0].expressions != nil {
				if yyS[yypt-0].expressions[0].IsArrayLiteral {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = ArrayLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else if yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsStructLiteral {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = StructLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else {
					yyVAL.expressions = Assignment(yyS[yypt-2].expressions, yyS[yypt-1].tok, yyS[yypt-0].expressions)
				}
			}
		}
	case 191:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs = append(yyS[yypt-2].expressions[len(yyS[yypt-2].expressions)-1].Outputs, yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs...)
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 193:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 194:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 202:
		{
			yyVAL.expressions = nil
		}
	case 204:
		{
			// it has to be the first expression so all the nested expressions are executed
			// instead of only executing the last one
			// UPDATE: I need to label all expressions. `goto` will jump to first occurrance anyway, so no problem
			// I need this behavior for affordances
			for _, expr := range yyS[yypt-0].expressions {
				expr.Label = yyS[yypt-2].tok
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 205:
		{
			yyVAL.expressions = nil
		}
	case 206:
		{
			yyVAL.expressions = nil
		}
	case 207:
		{
			yyVAL.expressions = nil
		}
	case 208:
		{
			yyVAL.expressions = yyS[yypt-2].expressions
		}
	case 210:
		{
			yyVAL.expressions = append(yyS[yypt-1].expressions, yyS[yypt-0].expressions...)
		}
	case 213:
		{
			yyVAL.expressions = nil
		}
	case 214:
		{
			yyVAL.expressions = nil
		}
	case 215:
		{
			if len(yyS[yypt-1].expressions) > 0 && yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Operator == nil && !yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].IsMethodCall {
				outs := yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Outputs
				if len(outs) > 0 {
					println(CompilationError(outs[0].FileName, outs[0].FileLine), "invalid expression")
				} else {
					println(CompilationError(CurrentFile, LineNo), "invalid expression")
				}
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyS[yypt-1].expressions
			}
			// $$ = $1
		}
	case 216:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-6].expressions, yyS[yypt-4].expressions, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, SEL_ELSEIFELSE)
		}
	case 217:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 218:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-4].expressions, nil, yyS[yypt-1].expressions)
		}
	case 219:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].SelectStatements, nil, SEL_ELSEIF)
		}
	case 220:
		{
			//
			yyVAL.expressions = SelectionStatement(yyS[yypt-4].expressions, nil, yyS[yypt-1].SelectStatements, nil, SEL_ELSEIF)
		}
	case 221:
		{
			//
			yyVAL.expressions = SelectionStatement(yyS[yypt-5].expressions, nil, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, SEL_ELSEIFELSE)
		}
	case 222:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-1].expressions, yyS[yypt-0].expressions, nil)
		}
	case 223:
		{
			yyVAL.expressions = nil
		}
	case 224:
		{
			yyVAL.SelectStatement = SelectStatement{
				Condition: yyS[yypt-3].expressions,
				Then:      yyS[yypt-1].expressions,
			}
		}
	case 225:
		{
			yyVAL.SelectStatement = SelectStatement{
				Condition: yyS[yypt-2].expressions,
				Then:      nil,
			}
		}
	case 226:
		{
			yyVAL.SelectStatements = []SelectStatement{yyS[yypt-0].SelectStatement}
		}
	case 227:
		{
			yyVAL.SelectStatements = append(yyS[yypt-1].SelectStatements, yyS[yypt-0].SelectStatement)
		}
	case 228:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 229:
		{
			yyVAL.expressions = nil
		}
	case 230:
		{
			yyVAL.expressions = IterationExpressions(nil, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 231:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-2].expressions, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 232:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-3].expressions, yyS[yypt-2].expressions, yyS[yypt-1].expressions, yyS[yypt-0].expressions)
		}
	case 233:
		{
			retExprs := ReturnExpressions{Expressions: AssociateReturnExpressions(0, yyS[yypt-0].expressions)}
			retExprs.Size++
			yyVAL.ReturnExpressions = retExprs
		}
	case 234:
		{
			yyS[yypt-2].ReturnExpressions.Expressions = append(yyS[yypt-2].ReturnExpressions.Expressions, AssociateReturnExpressions(yyS[yypt-2].ReturnExpressions.Size, yyS[yypt-0].expressions)...)
			yyS[yypt-2].ReturnExpressions.Size++
			yyVAL.ReturnExpressions = yyS[yypt-2].ReturnExpressions
		}
	case 235:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				expr := MakeExpression(Natives[OP_JMP], CurrentFile, LineNo)
				expr.Package = pkg
				expr.Label = yyS[yypt-1].tok

				arg := MakeArgument("", CurrentFile, LineNo).AddType("bool")
				arg.Package = pkg

				expr.AddInput(arg)

				yyVAL.expressions = []*CXExpression{expr}
			} else {
				panic(err)
			}
		}
	case 236:
		{
			yyVAL.expressions = ContinueExpressions()
		}
	case 237:
		{
			yyVAL.expressions = BreakExpressions()
		}
	case 238:
		{
			yyVAL.expressions = AddJmpToReturnExpressions(ReturnExpressions{})
		}
	case 239:
		{
			yyVAL.expressions = AddJmpToReturnExpressions(yyS[yypt-1].ReturnExpressions)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
